"use strict";(self.webpackChunkmy_application=self.webpackChunkmy_application||[]).push([[3391],{3391:(r,n,e)=>{e.r(n),e.d(n,{default:()=>o});const o="CREATE TABLE dbo.EmployeePhoto\r\n(\r\n    EmployeeId INT NOT NULL PRIMARY KEY,\r\n    Photo VARBINARY(MAX) FILESTREAM NULL,\r\n    MyRowGuidColumn UNIQUEIDENTIFIER NOT NULL ROWGUIDCOL\r\n                    UNIQUE DEFAULT NEWID()\r\n);\r\n\r\nGO\r\n\r\n/*\r\ntext_of_comment\r\n/* nested comment */\r\n*/\r\n\r\n-- line comment\r\n\r\nCREATE NONCLUSTERED INDEX IX_WorkOrder_ProductID\r\n    ON Production.WorkOrder(ProductID)\r\n    WITH (FILLFACTOR = 80,\r\n        PAD_INDEX = ON,\r\n        DROP_EXISTING = ON);\r\nGO\r\n\r\nWHILE (SELECT AVG(ListPrice) FROM Production.Product) < $300\r\nBEGIN\r\n   UPDATE Production.Product\r\n      SET ListPrice = ListPrice * 2\r\n   SELECT MAX(ListPrice) FROM Production.Product\r\n   IF (SELECT MAX(ListPrice) FROM Production.Product) > $500\r\n      BREAK\r\n   ELSE\r\n      CONTINUE\r\nEND\r\nPRINT 'Too much for the market to bear';\r\n\r\nMERGE INTO Sales.SalesReason AS [Target]\r\nUSING (VALUES ('Recommendation','Other'), ('Review', 'Marketing'), ('Internet', 'Promotion'))\r\n       AS [Source] ([NewName], NewReasonType)\r\nON [Target].[Name] = [Source].[NewName]\r\nWHEN MATCHED\r\nTHEN UPDATE SET ReasonType = [Source].NewReasonType\r\nWHEN NOT MATCHED BY TARGET\r\nTHEN INSERT ([Name], ReasonType) VALUES ([NewName], NewReasonType)\r\nOUTPUT $action INTO @SummaryOfChanges;\r\n\r\nSELECT ProductID, OrderQty, SUM(LineTotal) AS Total\r\nFROM Sales.SalesOrderDetail\r\nWHERE UnitPrice < $5.00\r\nGROUP BY ProductID, OrderQty\r\nORDER BY ProductID, OrderQty\r\nOPTION (HASH GROUP, FAST 10);\r\n"}}]);
//# sourceMappingURL=3391.js.map