{"version":3,"file":"3648.js","mappings":"8IAAA,6xC","sources":["file:///C:\\0-E\\Code Store\\monaco-editor\\website\\src\\website\\data\\home-samples\\sample.dart.txt"],"sourcesContent":["export default \"import 'dart:math' show Random;\\r\\n\\r\\nvoid main() async {\\r\\n  print('Compute π using the Monte Carlo method.');\\r\\n  await for (final estimate in computePi().take(100)) {\\r\\n    print('π ≅ $estimate');\\r\\n  }\\r\\n}\\r\\n\\r\\n/// Generates a stream of increasingly accurate estimates of π.\\r\\nStream<double> computePi({int batch = 100000}) async* {\\r\\n  var total = 0; // Inferred to be of type int\\r\\n  var count = 0;\\r\\n  while (true) {\\r\\n    final points = generateRandom().take(batch);\\r\\n    final inside = points.where((p) => p.isInsideUnitCircle);\\r\\n\\r\\n    total += batch;\\r\\n    count += inside.length;\\r\\n    final ratio = count / total;\\r\\n\\r\\n    // Area of a circle is A = π⋅r², therefore π = A/r².\\r\\n    // So, when given random points with x ∈ <0,1>,\\r\\n    // y ∈ <0,1>, the ratio of those inside a unit circle\\r\\n    // should approach π / 4. Therefore, the value of π\\r\\n    // should be:\\r\\n    yield ratio * 4;\\r\\n  }\\r\\n}\\r\\n\\r\\nIterable<Point> generateRandom([int? seed]) sync* {\\r\\n  final random = Random(seed);\\r\\n  while (true) {\\r\\n    yield Point(random.nextDouble(), random.nextDouble());\\r\\n  }\\r\\n}\\r\\n\\r\\nclass Point {\\r\\n  final double x;\\r\\n  final double y;\\r\\n\\r\\n  const Point(this.x, this.y);\\r\\n\\r\\n  bool get isInsideUnitCircle => x * x + y * y <= 1;\\r\\n}\\r\\n\";"],"names":[],"sourceRoot":""}