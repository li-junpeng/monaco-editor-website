"use strict";(self.webpackChunkmy_application=self.webpackChunkmy_application||[]).push([[4336],{4336:(t,n,r)=>{r.r(n),r.d(n,{default:()=>e});const e='/** @type {monaco.languages.SemanticTokensLegend} */\r\nconst legend = {\r\n\ttokenTypes: [\r\n\t\t"comment",\r\n\t\t"string",\r\n\t\t"keyword",\r\n\t\t"number",\r\n\t\t"regexp",\r\n\t\t"operator",\r\n\t\t"namespace",\r\n\t\t"type",\r\n\t\t"struct",\r\n\t\t"class",\r\n\t\t"interface",\r\n\t\t"enum",\r\n\t\t"typeParameter",\r\n\t\t"function",\r\n\t\t"member",\r\n\t\t"macro",\r\n\t\t"variable",\r\n\t\t"parameter",\r\n\t\t"property",\r\n\t\t"label",\r\n\t],\r\n\ttokenModifiers: [\r\n\t\t"declaration",\r\n\t\t"documentation",\r\n\t\t"readonly",\r\n\t\t"static",\r\n\t\t"abstract",\r\n\t\t"deprecated",\r\n\t\t"modification",\r\n\t\t"async",\r\n\t],\r\n};\r\n\r\n/** @type {(type: string)=>number} */\r\nfunction getType(type) {\r\n\treturn legend.tokenTypes.indexOf(type);\r\n}\r\n\r\n/** @type {(modifier: string[]|string|null)=>number} */\r\nfunction getModifier(modifiers) {\r\n\tif (typeof modifiers === "string") {\r\n\t\tmodifiers = [modifiers];\r\n\t}\r\n\tif (Array.isArray(modifiers)) {\r\n\t\tlet nModifiers = 0;\r\n\t\tfor (let modifier of modifiers) {\r\n\t\t\tconst nModifier = legend.tokenModifiers.indexOf(modifier);\r\n\t\t\tif (nModifier > -1) {\r\n\t\t\t\tnModifiers |= (1 << nModifier) >>> 0;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn nModifiers;\r\n\t} else {\r\n\t\treturn 0;\r\n\t}\r\n}\r\n\r\nconst tokenPattern = new RegExp("([a-zA-Z]+)((?:\\\\.[a-zA-Z]+)*)", "g");\r\n\r\nmonaco.languages.registerDocumentSemanticTokensProvider("plaintext", {\r\n\tgetLegend: function () {\r\n\t\treturn legend;\r\n\t},\r\n\tprovideDocumentSemanticTokens: function (model, lastResultId, token) {\r\n\t\tconst lines = model.getLinesContent();\r\n\r\n\t\t/** @type {number[]} */\r\n\t\tconst data = [];\r\n\r\n\t\tlet prevLine = 0;\r\n\t\tlet prevChar = 0;\r\n\r\n\t\tfor (let i = 0; i < lines.length; i++) {\r\n\t\t\tconst line = lines[i];\r\n\r\n\t\t\tfor (let match = null; (match = tokenPattern.exec(line)); ) {\r\n\t\t\t\t// translate token and modifiers to number representations\r\n\t\t\t\tlet type = getType(match[1]);\r\n\t\t\t\tif (type === -1) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tlet modifier = match[2].length\r\n\t\t\t\t\t? getModifier(match[2].split(".").slice(1))\r\n\t\t\t\t\t: 0;\r\n\r\n\t\t\t\tdata.push(\r\n\t\t\t\t\t// translate line to deltaLine\r\n\t\t\t\t\ti - prevLine,\r\n\t\t\t\t\t// for the same line, translate start to deltaStart\r\n\t\t\t\t\tprevLine === i ? match.index - prevChar : match.index,\r\n\t\t\t\t\tmatch[0].length,\r\n\t\t\t\t\ttype,\r\n\t\t\t\t\tmodifier\r\n\t\t\t\t);\r\n\r\n\t\t\t\tprevLine = i;\r\n\t\t\t\tprevChar = match.index;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn {\r\n\t\t\tdata: new Uint32Array(data),\r\n\t\t\tresultId: null,\r\n\t\t};\r\n\t},\r\n\treleaseDocumentSemanticTokens: function (resultId) {},\r\n});\r\n\r\n// add some missing tokens\r\nmonaco.editor.defineTheme("myCustomTheme", {\r\n\tbase: "vs",\r\n\tinherit: true,\r\n\tcolors: {},\r\n\trules: [\r\n\t\t{ token: "comment", foreground: "aaaaaa", fontStyle: "italic" },\r\n\t\t{ token: "keyword", foreground: "ce63eb" },\r\n\t\t{ token: "operator", foreground: "000000" },\r\n\t\t{ token: "namespace", foreground: "66afce" },\r\n\r\n\t\t{ token: "type", foreground: "1db010" },\r\n\t\t{ token: "struct", foreground: "0000ff" },\r\n\t\t{ token: "class", foreground: "0000ff", fontStyle: "bold" },\r\n\t\t{ token: "interface", foreground: "007700", fontStyle: "bold" },\r\n\t\t{ token: "enum", foreground: "0077ff", fontStyle: "bold" },\r\n\t\t{ token: "typeParameter", foreground: "1db010" },\r\n\t\t{ token: "function", foreground: "94763a" },\r\n\r\n\t\t{ token: "member", foreground: "94763a" },\r\n\t\t{ token: "macro", foreground: "615a60" },\r\n\t\t{ token: "variable", foreground: "3e5bbf" },\r\n\t\t{ token: "parameter", foreground: "3e5bbf" },\r\n\t\t{ token: "property", foreground: "3e5bbf" },\r\n\t\t{ token: "label", foreground: "615a60" },\r\n\r\n\t\t{ token: "type.static", fontStyle: "bold" },\r\n\t\t{ token: "class.static", foreground: "ff0000", fontStyle: "bold" },\r\n\t],\r\n});\r\n\r\nconst editor = monaco.editor.create(document.getElementById("container"), {\r\n\tvalue: [\r\n\t\t"Available token types:",\r\n\t\t"    [comment] [string] [keyword] [number] [regexp] [operator] [namespace]",\r\n\t\t"    [type] [struct] [class] [interface] [enum] [typeParameter] [function]",\r\n\t\t"    [member] [macro] [variable] [parameter] [property] [label]",\r\n\t\t"",\r\n\t\t"Available token modifiers:",\r\n\t\t"    [type.declaration] [type.documentation] [type.member] [type.static]",\r\n\t\t"    [type.abstract] [type.deprecated] [type.modification] [type.async]",\r\n\t\t"",\r\n\t\t"Some examples:",\r\n\t\t"    [class.static.token]     [type.static.abstract]",\r\n\t\t"    [class.static.token]     [type.static]",\r\n\t\t"",\r\n\t\t"    [struct]",\r\n\t\t"",\r\n\t\t"    [function.private]",\r\n\t\t"",\r\n\t\t"An error case:",\r\n\t\t"    [notInLegend]",\r\n\t].join("\\n"),\r\n\tlanguage: "plaintext",\r\n\ttheme: "myCustomTheme",\r\n\t// semantic tokens provider is disabled by default\r\n\t"semanticHighlighting.enabled": true,\r\n});\r\n'}}]);
//# sourceMappingURL=4336.js.map