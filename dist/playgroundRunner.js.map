{"version":3,"file":"playgroundRunner.js","mappings":"gSAKA,6BACC,IAAKA,OACJ,MAAM,IAAIC,MAAM,4BAEjB,OAAOD,MACR,EAEA,uBACC,OAAQE,OAAeF,MACxB,EASA,IACIG,EACAC,EAFAC,GAAU,EAGVC,EAAoB,IAAIC,SAAuB,CAACC,EAAKC,KACxDN,EAAUK,EACVJ,EAASK,CAAG,IAmEb,SAAgBC,EAAeC,GAK9B,MAAO,CACNC,UAAW,GAAGD,cACdE,kBANyB,CACzBC,GAAI,GAAGH,KAMPI,WAAY,GAAGJ,iDACfK,oBAAgBC,EAElB,CA3EA,sBAAOC,iBACN,OAAOZ,CACR,EAEA,aAAOY,eACNC,EAAsB,EAAAC,iBAMtB,OAJKf,IACJA,GAAU,EAMZa,eAA2BC,GAC1B,MAAME,EAASC,KAkChB,IAAoBC,EAhCbF,EAAeG,eAgCFD,EA/BDJ,EAAMP,UAgCjB,IAAIL,SAASC,IACnB,MAAMiB,EAASC,SAASC,cAAc,UACtCF,EAAOG,OAAS,IAAMpB,IACtBiB,EAAOP,OAAQ,EACfO,EAAOI,KAAO,kBACdJ,EAAOK,IAAMP,EACbG,SAASK,KAAKC,YAAYP,EAAO,KAnClCJ,EAAOY,KAAM,EACbZ,EAAOa,eAAiB,IAChBf,EAAMJ,WAId,MAAMoB,EAAMd,EAAOG,QAGnB,OAFAW,EAAIC,OAAO,CAAEC,MAAOlB,EAAMN,oBAEnB,IAAIN,SAASC,IAEnB2B,EAAI,CAAC,0BAA0B,KAC9BA,EACC,CACC,yCACA,sCACA,uCACA,uCACA,+CAED,KACC3B,EAAIR,OAAO,GAEZ,GACA,GAEJ,CAtCEsC,CAAYnB,GAAOoB,KAAKpC,EAASC,IAE3BE,CACR,EAgDa,EAAAc,gBAAkBV,EAC9B,qCAGD,kB,kIC1FA,gDAsBA,IAAI8B,cAEJtB,eAAeuB,WAAWC,OACzB,GAAIF,cACH,MAAM,IAAIvC,MAAM,uBAGjB,MAAM0C,oBAAsBjB,SAASC,cAAc,OACnDgB,oBAAoBC,UAAY,mBAChC,MAAMC,WAAanB,SAASC,cAAc,OAC1CkB,WAAWD,UAAY,SACvBD,oBAAoBX,YAAYa,YAChCnB,SAASoB,KAAKd,YAAYW,qBAE1BH,eAAgB,kBAAAO,YAAWL,MAAMM,mBAC3BR,cAENG,oBAAoBM,SAEpB,MAAMC,MAAQxB,SAASC,cAAc,SACrCuB,MAAMC,GAAK,eACXD,MAAME,UAAYV,MAAMW,IACxB3B,SAASoB,KAAKd,YAAYkB,OAE1BxB,SAASoB,KAAKM,WAAaV,MAAMY,KAEjC,MAAMC,GAAKC,UAAUd,MAAMa,IAE3B,IACCE,KAAKF,G,CACJ,MAAOG,GACR,MAAMC,EAAMjC,SAASC,cAAc,OACnCgC,EAAI3B,YACHN,SAASkC,eAAe,GAAGF,MAASA,EAAYhB,UAEjDhB,SAASoB,KAAKe,aAAaF,EAAKjC,SAASoB,KAAKgB,W,CAEhD,CAEA,SAASC,oBAAoBC,GAC5B9D,OAAO+D,OAAOC,YAAYF,EAAS,IACpC,CAkBA,SAASR,UAAUD,GAUlB,MAAMY,EAAgB,+BACtB,IAAK,MAAMC,KAAKb,EAAGc,SAASF,GAAgB,CAC3C,MAAMG,EAAKF,EAAE,GAEbb,GAAM,2CAA2Ce,MADlCC,KAAKC,UAAU,aAAeF,EAAK,0C,CAGnD,OAAOf,CACR,CAhGA,yBAEArD,OAAOuE,iBAAiB,WAAYC,IAEnC,GADsC,SAAlBxE,OAAOyE,OAI1B,YADAC,QAAQC,MAAM,kBAGf,MAAMC,EAAIJ,EAAMK,KACD,eAAXD,EAAEE,KACLvC,WAAWqC,EAAEpC,OACQ,eAAXoC,EAAEE,OACEtD,SAASuD,eACtB,gBAEK7B,UAAY0B,EAAEzB,I,IA+CrB6B,WAAmBC,qBAAuBpB,oBAE1CmB,WAAmBE,oBAAsB,SACzCC,EACAC,GAEAD,EAAME,oBAAmB,KACxB,MAAMC,EAAQH,EAAMI,WACpB1B,oBAAoB,CACnBiB,KAAM,qBACNM,iBACAE,SACC,GAEJ,C","sources":["file:///C:\\0-E\\Code Store\\monaco-editor\\website\\src\\monaco-loader.ts","file:///C:\\0-E\\Code Store\\monaco-editor\\website\\src\\runner\\index.ts"],"sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nexport function getLoadedMonaco(): typeof monaco {\r\n\tif (!monaco) {\r\n\t\tthrow new Error(\"monaco is not loaded yet\");\r\n\t}\r\n\treturn monaco;\r\n}\r\n\r\nexport function getMonaco(): typeof monaco | undefined {\r\n\treturn (window as any).monaco;\r\n}\r\n\r\nexport interface IMonacoSetup {\r\n\tloaderUrl: string;\r\n\tloaderConfigPaths: Record<string, string>;\r\n\tcodiconUrl: string;\r\n\tmonacoTypesUrl: string | undefined;\r\n}\r\n\r\nlet loading = false;\r\nlet resolve: (value: typeof monaco) => void;\r\nlet reject: (error: unknown) => void;\r\nlet loadMonacoPromise = new Promise<typeof monaco>((res, rej) => {\r\n\tresolve = res;\r\n\treject = rej;\r\n});\r\n\r\nexport async function waitForLoadedMonaco(): Promise<typeof monaco> {\r\n\treturn loadMonacoPromise;\r\n}\r\n\r\nexport async function loadMonaco(\r\n\tsetup: IMonacoSetup = prodMonacoSetup\r\n): Promise<typeof monaco> {\r\n\tif (!loading) {\r\n\t\tloading = true;\r\n\t\t_loadMonaco(setup).then(resolve, reject);\r\n\t}\r\n\treturn loadMonacoPromise;\r\n}\r\n\r\nasync function _loadMonaco(setup: IMonacoSetup): Promise<typeof monaco> {\r\n\tconst global = self as any;\r\n\r\n\tif (!(global as any).require) {\r\n\t\tawait loadScript(setup.loaderUrl);\r\n\t}\r\n\r\n\tglobal.AMD = true;\r\n\tglobal.getCodiconPath = () => {\r\n\t\treturn setup.codiconUrl;\r\n\t};\r\n\r\n\t/** @type {any} */\r\n\tconst req = global.require as any;\r\n\treq.config({ paths: setup.loaderConfigPaths });\r\n\r\n\treturn new Promise((res) => {\r\n\t\t// First load editor.main. If it inlines the plugins, we don't want to try to load them from the server.\r\n\t\treq([\"vs/editor/editor.main\"], () => {\r\n\t\t\treq(\r\n\t\t\t\t[\r\n\t\t\t\t\t\"vs/basic-languages/monaco.contribution\",\r\n\t\t\t\t\t\"vs/language/css/monaco.contribution\",\r\n\t\t\t\t\t\"vs/language/html/monaco.contribution\",\r\n\t\t\t\t\t\"vs/language/json/monaco.contribution\",\r\n\t\t\t\t\t\"vs/language/typescript/monaco.contribution\",\r\n\t\t\t\t],\r\n\t\t\t\t() => {\r\n\t\t\t\t\tres(monaco);\r\n\t\t\t\t}\r\n\t\t\t);\r\n\t\t});\r\n\t});\r\n}\r\n\r\nfunction loadScript(path: string): Promise<void> {\r\n\treturn new Promise((res) => {\r\n\t\tconst script = document.createElement(\"script\");\r\n\t\tscript.onload = () => res();\r\n\t\tscript.async = true;\r\n\t\tscript.type = \"text/javascript\";\r\n\t\tscript.src = path; // CodeQL [SM01507] This is safe because the runner (that allows for dynamic paths) runs in an isolated iframe. The hosting website uses a static path configuration. // CodeQL [SM03712] This is safe because the runner (that allows for dynamic paths) runs in an isolated iframe. The hosting website uses a static path configuration.\r\n\t\tdocument.head.appendChild(script);\r\n\t});\r\n}\r\n\r\nexport const prodMonacoSetup = getMonacoSetup(\r\n\t\"node_modules/monaco-editor/min/vs\"\r\n);\r\n\r\nexport function getMonacoSetup(corePath: string): IMonacoSetup {\r\n\tconst loaderConfigPaths = {\r\n\t\tvs: `${corePath}`,\r\n\t};\r\n\r\n\treturn {\r\n\t\tloaderUrl: `${corePath}/loader.js`,\r\n\t\tloaderConfigPaths,\r\n\t\tcodiconUrl: `${corePath}/base/browser/ui/codicons/codicon/codicon.ttf`,\r\n\t\tmonacoTypesUrl: undefined,\r\n\t};\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n\r\nimport { loadMonaco } from \"../monaco-loader\";\r\nimport { IMessageFromRunner, IMessageToRunner, IPreviewState } from \"../shared\";\r\nimport \"./style.scss\";\r\n\r\nwindow.addEventListener(\"message\", (event) => {\r\n\tconst isInSandbox = window.origin === \"null\";\r\n\tif (!isInSandbox) {\r\n\t\t// To prevent someone from using this html file to run arbitrary code in non-sandboxed context\r\n\t\tconsole.error(\"not in sandbox\");\r\n\t\treturn;\r\n\t}\r\n\tconst e = event.data as IMessageToRunner | { kind: undefined };\r\n\tif (e.kind === \"initialize\") {\r\n\t\tinitialize(e.state);\r\n\t} else if (e.kind === \"update-css\") {\r\n\t\tconst style = document.getElementById(\r\n\t\t\t\"custom-style\"\r\n\t\t) as HTMLStyleElement;\r\n\t\tstyle.innerHTML = e.css; // CodeQL [SM03712] This is safe because the runner runs in an isolated iframe.\r\n\t}\r\n});\r\n\r\nlet monacoPromise: Promise<any> | undefined = undefined;\r\n\r\nasync function initialize(state: IPreviewState) {\r\n\tif (monacoPromise) {\r\n\t\tthrow new Error(\"already initialized\");\r\n\t}\r\n\r\n\tconst loadingContainerDiv = document.createElement(\"div\");\r\n\tloadingContainerDiv.className = \"loader-container\";\r\n\tconst loadingDiv = document.createElement(\"div\");\r\n\tloadingDiv.className = \"loader\";\r\n\tloadingContainerDiv.appendChild(loadingDiv);\r\n\tdocument.body.appendChild(loadingContainerDiv);\r\n\r\n\tmonacoPromise = loadMonaco(state.monacoSetup);\r\n\tawait monacoPromise;\r\n\r\n\tloadingContainerDiv.remove();\r\n\r\n\tconst style = document.createElement(\"style\");\r\n\tstyle.id = \"custom-style\";\r\n\tstyle.innerHTML = state.css; // CodeQL [SM03712] This is safe because the runner runs in an isolated iframe. This feature is essential to the functionality of the playground. // CodeQL [SM02688] This is safe because the runner runs in an isolated iframe. This feature is essential to the functionality of the playground.\r\n\tdocument.body.appendChild(style);\r\n\r\n\tdocument.body.innerHTML += state.html;\r\n\r\n\tconst js = massageJs(state.js);\r\n\r\n\ttry {\r\n\t\teval(js); // CodeQL [SM01632] This is safe because the runner runs in an isolated iframe. This feature is essential to the functionality of the playground. // CodeQL [SM02688] This is safe because the runner runs in an isolated iframe. This feature is essential to the functionality of the playground.\r\n\t} catch (err) {\r\n\t\tconst pre = document.createElement(\"pre\");\r\n\t\tpre.appendChild(\r\n\t\t\tdocument.createTextNode(`${err}: ${(err as any).state}`)\r\n\t\t);\r\n\t\tdocument.body.insertBefore(pre, document.body.firstChild);\r\n\t}\r\n}\r\n\r\nfunction sendMessageToParent(message: IMessageFromRunner) {\r\n\twindow.parent.postMessage(message, \"*\");\r\n}\r\n\r\n(globalThis as any).$sendMessageToParent = sendMessageToParent;\r\n\r\n(globalThis as any).$bindModelToCodeStr = function bindModel(\r\n\tmodel: any,\r\n\tcodeStringName: string\r\n) {\r\n\tmodel.onDidChangeContent(() => {\r\n\t\tconst value = model.getValue();\r\n\t\tsendMessageToParent({\r\n\t\t\tkind: \"update-code-string\",\r\n\t\t\tcodeStringName,\r\n\t\t\tvalue,\r\n\t\t});\r\n\t});\r\n};\r\n\r\nfunction massageJs(js: string) {\r\n\t/*\r\n\tAlternate experimental syntax: // bind to code string: `editor.getModel()` -> codeString\r\n\r\n\tconst bindToCodeStringRegexp = /\\/\\/ bind to code string: `(.*?)` -> (.*?)(\\n|$)/g;\r\n\tjs = js.replaceAll(bindToCodeStringRegexp, (match, p1, p2) => {\r\n\t\treturn `globalThis.bindModelToCodeStr(${p1}, ${JSON.stringify(p2)})\\n`;\r\n\t});\r\n\t*/\r\n\r\n\tconst setFromRegexp = /\\/*\\Wset from `(.*?)`:\\W*\\//g;\r\n\tfor (const m of js.matchAll(setFromRegexp)) {\r\n\t\tconst p1 = m[1];\r\n\t\tconst target = JSON.stringify(\"set from `\" + p1 + \"`\");\r\n\t\tjs += `\\n try { globalThis.$bindModelToCodeStr(${p1}, ${target}); } catch (e) { console.error(e); }`;\r\n\t}\r\n\treturn js;\r\n}\r\n"],"names":["monaco","Error","window","resolve","reject","loading","loadMonacoPromise","Promise","res","rej","getMonacoSetup","corePath","loaderUrl","loaderConfigPaths","vs","codiconUrl","monacoTypesUrl","undefined","async","setup","prodMonacoSetup","global","self","path","require","script","document","createElement","onload","type","src","head","appendChild","AMD","getCodiconPath","req","config","paths","_loadMonaco","then","monacoPromise","initialize","state","loadingContainerDiv","className","loadingDiv","body","loadMonaco","monacoSetup","remove","style","id","innerHTML","css","html","js","massageJs","eval","err","pre","createTextNode","insertBefore","firstChild","sendMessageToParent","message","parent","postMessage","setFromRegexp","m","matchAll","p1","JSON","stringify","addEventListener","event","origin","console","error","e","data","kind","getElementById","globalThis","$sendMessageToParent","$bindModelToCodeStr","model","codeStringName","onDidChangeContent","value","getValue"],"sourceRoot":""}