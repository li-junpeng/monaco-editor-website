{"version":3,"file":"8189.js","mappings":"8IAAA,2vC","sources":["file:///C:\\0-E\\Code Store\\monaco-editor\\website\\src\\website\\data\\home-samples\\sample.scala.txt"],"sourcesContent":["export default \"package examples\\r\\n\\r\\n/** Quick sort, imperative style */\\r\\nobject sort {\\r\\n\\r\\n  /** Nested methods can use and even update everything\\r\\n   *  visible in their scope (including local variables or\\r\\n   *  arguments of enclosing methods).\\r\\n   */\\r\\n  def sort(a: Array[Int]) {\\r\\n\\r\\n    def swap(i: Int, j: Int) {\\r\\n      val t = a(i); a(i) = a(j); a(j) = t\\r\\n    }\\r\\n\\r\\n    def sort1(l: Int, r: Int) {\\r\\n      val pivot = a((l + r) / 2)\\r\\n      var i = l\\r\\n      var j = r\\r\\n      while (i <= j) {\\r\\n        while (a(i) < pivot) i += 1\\r\\n        while (a(j) > pivot) j -= 1\\r\\n        if (i <= j) {\\r\\n          swap(i, j)\\r\\n          i += 1\\r\\n          j -= 1\\r\\n        }\\r\\n      }\\r\\n      if (l < j) sort1(l, j)\\r\\n      if (j < r) sort1(i, r)\\r\\n    }\\r\\n\\r\\n    if (a.length > 0)\\r\\n      sort1(0, a.length - 1)\\r\\n  }\\r\\n\\r\\n  def println(ar: Array[Int]) {\\r\\n    def print1 = {\\r\\n      def iter(i: Int): String =\\r\\n        ar(i) + (if (i < ar.length-1) \\\",\\\" + iter(i+1) else \\\"\\\")\\r\\n      if (ar.length == 0) \\\"\\\" else iter(0)\\r\\n    }\\r\\n    Console.println(\\\"[\\\" + print1 + \\\"]\\\")\\r\\n  }\\r\\n\\r\\n  def main(args: Array[String]) {\\r\\n    val ar = Array(6, 2, 8, 5, 1)\\r\\n    println(ar)\\r\\n    sort(ar)\\r\\n    println(ar)\\r\\n  }\\r\\n\\r\\n}\\r\\n\";"],"names":[],"sourceRoot":""}