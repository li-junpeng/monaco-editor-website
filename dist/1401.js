"use strict";(self.webpackChunkmy_application=self.webpackChunkmy_application||[]).push([[1401],{1401:(n,r,e)=>{e.r(r),e.d(r,{default:()=>t});const t='// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full\r\n// license information.\r\n\r\n/*\r\n *\tCOMMAND LINE: -Ox -Gz -YX -UPROTOTYPES_REQUIRED\r\n */\r\n\r\n#pragma warning(disable : 4532)\r\n#pragma warning(disable : 4702)\r\n\r\n#if defined(_WIN32)\r\n\r\n#if defined(_M_SH)\r\n#define WIN_CE\r\n#endif\r\n\r\n#if defined(_M_AMD64)\r\n#define NEST_IN_FINALLY /* allow when __try nested in __finally OK */\r\n#endif\r\n\r\n#define NTSTATUS LONG\r\n#define EXCEPTION_NESTED_CALL 0x10\r\n#define RtlRaiseStatus(x) RaiseException((x), 0, 0, NULL)\r\n#define RtlRaiseException(x)                                                   \\\r\n  RaiseException((x)->ExceptionCode, (x)->ExceptionFlags,                      \\\r\n                 (x)->NumberParameters, (x)->ExceptionInformation)\r\n#define IN\r\n#define OUT\r\n#if !(defined(_M_IA64) || defined(_M_ALPHA) || defined(_M_PPC) ||              \\\r\n      defined(_M_AMD64) || defined(_M_ARM) || defined(_M_ARM64))\r\n#define i386 1\r\n#endif\r\n#define try __try\r\n#define except __except\r\n#define finally __finally\r\n#define leave __leave\r\n\r\n#endif\r\n\r\n#define WIN32_LEAN_AND_MEAN\r\n\r\n#include "stdio.h"\r\n#if defined(_M_IA64) || defined(_M_ALPHA) || defined(_M_PPC) ||                \\\r\n    defined(_M_AMD64) || defined(_M_ARM) || defined(_M_ARM64)\r\n#include "setjmpex.h"\r\n#else\r\n#include "setjmp.h"\r\n#endif\r\n#include "float.h"\r\n#include "windows.h"\r\n#include "math.h"\r\n\r\n#if !defined(STATUS_SUCCESS)\r\n#define STATUS_SUCCESS 0\r\n#endif\r\n#if !defined(STATUS_UNSUCCESSFUL)\r\n#define STATUS_UNSUCCESSFUL ((NTSTATUS)0xC0000001L)\r\n#endif\r\n\r\n//\r\n// Define switch constants.\r\n//\r\n\r\n#define BLUE 0\r\n#define RED 1\r\n\r\n//\r\n// Define function prototypes.\r\n//\r\n\r\nVOID addtwo(IN LONG First, IN LONG Second, IN PLONG Place);\r\n\r\nVOID bar1(IN NTSTATUS Status, IN PLONG Counter);\r\n\r\nVOID bar2(IN PLONG BlackHole, IN PLONG BadAddress, IN PLONG Counter);\r\n\r\nVOID dojump(IN jmp_buf JumpBuffer, IN PLONG Counter);\r\n\r\nLONG Echo(IN LONG Value);\r\n\r\n#if !defined(WIN_CE) // return through finally not allowed on WinCE\r\nVOID eret(IN NTSTATUS Status, IN PLONG Counter);\r\n#endif\r\n\r\nVOID except1(IN PLONG Counter);\r\n\r\nULONG\r\nexcept2(IN PEXCEPTION_POINTERS ExceptionPointers, IN PLONG Counter);\r\n\r\nULONG\r\nexcept3(IN PEXCEPTION_POINTERS ExceptionPointers, IN PLONG Counter);\r\n\r\nVOID foo1(IN NTSTATUS Status);\r\n\r\nVOID foo2(IN PLONG BlackHole, IN PLONG BadAddress);\r\n\r\n#if !defined(WIN_CE) // return from finally not allowed on WinCE\r\nVOID fret(IN PLONG Counter);\r\n#endif\r\n\r\nBOOLEAN\r\nTkm(VOID);\r\n\r\nVOID Test61Part2(IN OUT PULONG Counter);\r\n\r\ndouble SquareDouble(IN double op);\r\n\r\nDECLSPEC_NOINLINE\r\nULONG\r\nPgFilter(VOID)\r\n\r\n{\r\n\r\n  printf("filter entered...");\r\n  return EXCEPTION_EXECUTE_HANDLER;\r\n}\r\n\r\n#pragma warning(push)\r\n#pragma warning(disable : 4532)\r\n\r\nVOID PgTest69(IN PLONG State, IN PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      *Fault += 1;\r\n    }\r\n    finally {\r\n      if (AbnormalTermination()) {\r\n        if (*State == 1) {\r\n          *State += 1;\r\n\r\n        } else {\r\n          *Fault += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  except(((*State += 1) == 1) ? PgFilter() : EXCEPTION_CONTINUE_SEARCH) {\r\n    if (*State != 2) {\r\n      *Fault += 1;\r\n    }\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID PgTest70(IN PLONG State, IN PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      *Fault += 1;\r\n    }\r\n    finally {\r\n      if (AbnormalTermination()) {\r\n        if (*State == 2) {\r\n          PgFilter();\r\n          return;\r\n\r\n        } else {\r\n          *Fault += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  except(((*State += 2) == 2) ? EXCEPTION_EXECUTE_HANDLER\r\n                              : EXCEPTION_CONTINUE_SEARCH) {\r\n    *Fault += 1;\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID PgTest71(IN PLONG State, IN PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        *Fault += 1;\r\n      }\r\n      finally {\r\n        if (AbnormalTermination()) {\r\n          if (*State == 3) {\r\n            *State += 3;\r\n            return;\r\n\r\n          } else {\r\n            *Fault += 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    finally {\r\n      if (AbnormalTermination()) {\r\n        if (*State == 6) {\r\n          *State += 3;\r\n\r\n        } else {\r\n          *Fault += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  except(((*State += 3) == 3) ? PgFilter() : EXCEPTION_CONTINUE_SEARCH) {\r\n    *Fault += 1;\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID PgTest72(IN PLONG State, IN PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        *Fault += 1;\r\n      }\r\n      finally {\r\n        if (AbnormalTermination()) {\r\n          if (*State == 4) {\r\n            *State += 4;\r\n            return;\r\n\r\n          } else {\r\n            *Fault += 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    finally {\r\n      if (AbnormalTermination()) {\r\n        if (*State == 8) {\r\n          *State += 4;\r\n          PgFilter();\r\n\r\n        } else {\r\n          *Fault += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  except(((*State += 4) == 4) ? EXCEPTION_EXECUTE_HANDLER\r\n                              : EXCEPTION_CONTINUE_SEARCH) {\r\n    *Fault += 1;\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID PgTest73(IN PLONG State, IN PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        *Fault += 1;\r\n      }\r\n      finally {\r\n        if (AbnormalTermination()) {\r\n          if (*State == 5) {\r\n            *State += 5;\r\n\r\n          } else {\r\n            *Fault += 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    finally {\r\n      if (AbnormalTermination()) {\r\n        if (*State == 10) {\r\n          *State += 5;\r\n          return;\r\n\r\n        } else {\r\n          *Fault += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  except(((*State += 5) == 5) ? PgFilter() : EXCEPTION_CONTINUE_SEARCH) {\r\n    *Fault += 1;\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID PgTest74(IN PLONG State, IN PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        *Fault += 1;\r\n      }\r\n      finally {\r\n        if (AbnormalTermination()) {\r\n          if (*State == 6) {\r\n            *State += 6;\r\n\r\n          } else {\r\n            *Fault += 1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    finally {\r\n      if (AbnormalTermination()) {\r\n        if (*State == 12) {\r\n          *State += 6;\r\n          PgFilter();\r\n          return;\r\n\r\n        } else {\r\n          *Fault += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  except(((*State += 6) == 6) ? EXCEPTION_EXECUTE_HANDLER\r\n                              : EXCEPTION_CONTINUE_SEARCH) {\r\n    *Fault += 1;\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID PgTest75(IN PLONG State, IN PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        try {\r\n          *Fault += 1;\r\n        }\r\n        finally {\r\n          if (AbnormalTermination()) {\r\n            if (*State == 7) {\r\n              *State += 7;\r\n              *Fault += 1;\r\n\r\n            } else {\r\n              *State += 10;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      except(((*State += 7) == 7) ? EXCEPTION_EXECUTE_HANDLER\r\n                                  : EXCEPTION_CONTINUE_SEARCH) {\r\n        *Fault += 1;\r\n      }\r\n    }\r\n    finally {\r\n      if (AbnormalTermination()) {\r\n        if (*State == 28) {\r\n          *State += 7;\r\n          return;\r\n\r\n        } else {\r\n          *Fault += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  except(((*State += 7) == 28) ? PgFilter() : EXCEPTION_CONTINUE_SEARCH) {\r\n    *Fault += 1;\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID PgTest76(IN PLONG State, IN PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        try {\r\n          *Fault += 1;\r\n        }\r\n        finally {\r\n          if (AbnormalTermination()) {\r\n            if (*State == 8) {\r\n              *State += 8;\r\n              *Fault += 1;\r\n\r\n            } else {\r\n              *State += 10;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      except(((*State += 8) == 8) ? EXCEPTION_EXECUTE_HANDLER\r\n                                  : EXCEPTION_CONTINUE_SEARCH) {\r\n        *Fault += 1;\r\n      }\r\n    }\r\n    finally {\r\n      if (AbnormalTermination()) {\r\n        if (*State == 32) {\r\n          *State += 8;\r\n          PgFilter();\r\n          return;\r\n\r\n        } else {\r\n          *Fault += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  except(((*State += 8) == 32) ? EXCEPTION_EXECUTE_HANDLER\r\n                               : EXCEPTION_CONTINUE_SEARCH) {\r\n    *Fault += 1;\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID PgTest77(IN PLONG State, IN PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        try {\r\n          *Fault += 1;\r\n        }\r\n        finally {\r\n          if (AbnormalTermination()) {\r\n            if (*State == 9) {\r\n              *State += 9;\r\n              *Fault += 1;\r\n\r\n            } else {\r\n              *State += 10;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      except(((*State += 9) == 9) ? PgFilter() : EXCEPTION_CONTINUE_SEARCH) {\r\n        *Fault += 1;\r\n      }\r\n    }\r\n    finally {\r\n      if (AbnormalTermination()) {\r\n        if (*State == 36) {\r\n          *State += 9;\r\n          return;\r\n\r\n        } else {\r\n          *Fault += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  except(((*State += 9) == 36) ? EXCEPTION_EXECUTE_HANDLER\r\n                               : EXCEPTION_CONTINUE_SEARCH) {\r\n    *Fault += 1;\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID PgTest78(IN PLONG State, IN PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        try {\r\n          *Fault += 1;\r\n        }\r\n        finally {\r\n          if (AbnormalTermination()) {\r\n            if (*State == 10) {\r\n              *State += 10;\r\n              PgFilter();\r\n              *Fault += 1;\r\n\r\n            } else {\r\n              *State += 10;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      except(((*State += 10) == 10) ? EXCEPTION_EXECUTE_HANDLER\r\n                                    : EXCEPTION_CONTINUE_SEARCH) {\r\n        *Fault += 1;\r\n      }\r\n    }\r\n    finally {\r\n      if (AbnormalTermination()) {\r\n        if (*State == 40) {\r\n          *State += 10;\r\n          return;\r\n\r\n        } else {\r\n          *Fault += 1;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  except(((*State += 10) == 40) ? EXCEPTION_EXECUTE_HANDLER\r\n                                : EXCEPTION_CONTINUE_SEARCH) {\r\n    *Fault += 1;\r\n  }\r\n\r\n  return;\r\n}\r\n\r\n#pragma warning(pop)\r\n\r\nVOID Test79(PLONG Counter, PLONG Fault)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        *Fault += 1;\r\n      }\r\n      finally {\r\n        printf("finally 1...");\r\n        *Fault += 1;\r\n      }\r\n    }\r\n    finally { printf("finally 2..."); }\r\n  }\r\n  except(*Counter += 1, printf("filter 1..."), EXCEPTION_CONTINUE_SEARCH) {}\r\n\r\n  return;\r\n}\r\n\r\nULONG G;\r\n\r\nULONG\r\nTest80(VOID)\r\n\r\n{\r\n\r\n  G = 1;\r\n  try {\r\n    while (G) {\r\n      try {\r\n        if (G == 10) {\r\n          return 1;\r\n        }\r\n\r\n        if (G == 1) {\r\n          continue;\r\n        }\r\n      }\r\n      finally { G = 0; }\r\n    }\r\n  }\r\n  finally { G = 10; }\r\n\r\n  return 0;\r\n}\r\n\r\nvoid Test81(int *pCounter) {\r\n  volatile char *AvPtr = NULL;\r\n\r\n  __try {\r\n    __try { *AvPtr = \'\\0\'; }\r\n    __except(EXCEPTION_EXECUTE_HANDLER) { __leave; }\r\n  }\r\n  __finally {\r\n    printf("in finally ");\r\n    *pCounter += 1;\r\n  }\r\n  return;\r\n}\r\n\r\nDECLSPEC_NOINLINE\r\nVOID Test82Foo(VOID)\r\n\r\n{\r\n  *(volatile int *)0 = 0;\r\n}\r\n\r\nVOID Test82(__inout PLONG Counter)\r\n\r\n{\r\n\r\n  int retval = 1;\r\n\r\n  __try {\r\n    __try { Test82Foo(); }\r\n    __finally {\r\n      switch (*Counter) {\r\n      case 0:\r\n        printf("something failed!\\n");\r\n        retval = 6;\r\n        break;\r\n\r\n      case 1:\r\n        retval = 0;\r\n        break;\r\n\r\n      case 2:\r\n        printf("how did you get here?\\n");\r\n        retval = 2;\r\n        break;\r\n\r\n      case 3:\r\n        printf("what?!?\\n");\r\n        retval = 3;\r\n        break;\r\n\r\n      case 4:\r\n        printf("not correct\\n");\r\n        retval = 4;\r\n        break;\r\n\r\n      case 5:\r\n        printf("error!\\n");\r\n        retval = 5;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  __except(1){}\r\n\r\n  *Counter = retval;\r\n  return;\r\n}\r\n\r\nLONG Test83(VOID)\r\n\r\n{\r\n\r\n  G = 1;\r\n  try {\r\n    try {\r\n      while (G) {\r\n        try {\r\n          if (G == 10) {\r\n            return 1;\r\n          }\r\n\r\n          if (G == 1) {\r\n            continue;\r\n          }\r\n        }\r\n        finally { G = 0; }\r\n      }\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { leave; }\r\n  }\r\n  finally { G = 10; }\r\n\r\n  return 0;\r\n}\r\n\r\nDECLSPEC_NOINLINE\r\nVOID Test84(_Inout_ PLONG Counter)\r\n\r\n{\r\n  volatile int *Fault = 0;\r\n\r\n  try {\r\n    try {\r\n      *Fault += 1;\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) {\r\n      try {\r\n        return;\r\n      }\r\n      finally { *Counter += 1; }\r\n    }\r\n  }\r\n  finally {\r\n\r\n    if (AbnormalTermination()) {\r\n      *Counter += 1;\r\n    }\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nDECLSPEC_NOINLINE\r\nLONG Test85(_Inout_ PLONG Counter)\r\n\r\n{\r\n  volatile int *Fault = 0;\r\n\r\n  G = 1;\r\n  try {\r\n    try {\r\n      try {\r\n        while (G) {\r\n          try {\r\n            try {\r\n              if (G == 10) {\r\n                return 1;\r\n              }\r\n              try {\r\n                *Counter += 1;\r\n              }\r\n              except(EXCEPTION_EXECUTE_HANDLER) {}\r\n\r\n              if (G == 1) {\r\n                continue;\r\n              }\r\n            }\r\n            finally {\r\n              G = 0;\r\n              *Counter += 1;\r\n              *Fault += 1;\r\n            }\r\n          }\r\n          except(EXCEPTION_EXECUTE_HANDLER) {\r\n            *Counter += 1;\r\n            leave;\r\n          }\r\n        }\r\n      }\r\n      finally {\r\n        G = 10;\r\n        *Counter += 1;\r\n        *Fault += 1;\r\n      }\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { *Counter += 1; }\r\n    *Counter += 1;\r\n  }\r\n  finally { *Counter += 1; }\r\n  return 1;\r\n}\r\n\r\nDECLSPEC_NOINLINE\r\nVOID Test86(_Inout_ PLONG Counter)\r\n\r\n{\r\n  volatile int *Fault = 0;\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        try {\r\n          try {\r\n            try {\r\n              *Fault += 1;\r\n            }\r\n            except(printf("Filter1 %d..", *Counter),\r\n                   EXCEPTION_EXECUTE_HANDLER) {\r\n              try {\r\n                printf("Handler1 %d..", *Counter);\r\n                return;\r\n              }\r\n              finally {\r\n                printf("Finally1 %d..", *Counter);\r\n                *Counter += 1;\r\n              }\r\n            }\r\n          }\r\n          finally {\r\n            printf("Finally2 %d..", *Counter);\r\n            *Counter += 1;\r\n          }\r\n        }\r\n        except(EXCEPTION_EXECUTE_HANDLER) { leave; }\r\n      }\r\n      finally { *Counter += 1; }\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { leave; }\r\n  }\r\n  finally { *Counter += 1; }\r\n\r\n  return;\r\n}\r\n\r\nVOID Test87(_Inout_ PLONG Counter)\r\n\r\n/*++\r\n\r\nRoutine Description:\r\n\r\n    This function verifies the behavior of nested exception dispatching.\r\n\r\nArguments:\r\n\r\n    Counter - Supplies a pointer to the state counter.\r\n\r\nReturn Value:\r\n    None.\r\n\r\n--*/\r\n\r\n{\r\n  volatile int *Fault = 0;\r\n\r\n//\r\n// N.B.  Disabled on x86 due to failing test case with handling of returns\r\n//       in nested termination handlers on x86.\r\n//\r\n//       Disabled on ARM due to failing test case with handling of abutting\r\n//       termination handlers within an except handler.\r\n//\r\n//       Disabled on AMD64 due to failing test case with handling of\r\n//       abutting termination handlers within an except handler when a\r\n//       non-local goto is involved.\r\n//\r\n\r\n#if !defined(_X86_)\r\n  try {\r\n    try {\r\n      try {\r\n        try {\r\n          try {\r\n            *Fault += 1;\r\n\r\n            try {\r\n            }\r\n            finally {\r\n              if (AbnormalTermination()) {\r\n                *Fault += 1;\r\n              }\r\n            }\r\n          }\r\n          finally {\r\n\r\n            if (AbnormalTermination()) {\r\n              if ((*Counter += 13) == 26) {\r\n                return;\r\n\r\n              } else {\r\n                *Fault += 1;\r\n              }\r\n            }\r\n          }\r\n        }\r\n        finally {\r\n          if (AbnormalTermination()) {\r\n            *Counter += 13;\r\n            *Fault += 1;\r\n          }\r\n        }\r\n      }\r\n      except(((*Counter += 13) == 13) ? EXCEPTION_EXECUTE_HANDLER\r\n                                      : EXCEPTION_CONTINUE_SEARCH) {\r\n        *Fault += 1;\r\n      }\r\n    }\r\n    except(((*Counter += 13) == 65) ? EXCEPTION_EXECUTE_HANDLER\r\n                                    : EXCEPTION_CONTINUE_SEARCH) {\r\n      try {\r\n        *Counter += 13;\r\n        return;\r\n      }\r\n      finally {\r\n        if (AbnormalTermination()) {\r\n          *Counter += 13;\r\n          goto Finish;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  finally {\r\n\r\n    if (AbnormalTermination()) {\r\n      if ((*Counter += 13) == 104) {\r\n        goto Finish;\r\n      }\r\n    }\r\n  }\r\n\r\nFinish:\r\n#else\r\n  *Counter = 104;\r\n#endif\r\n\r\n  return;\r\n}\r\n\r\nVOID Test88(_Inout_ PLONG Counter)\r\n\r\n{\r\n  volatile int *Fault = 0;\r\n\r\n  try {\r\n    try {\r\n      try {\r\n        try {\r\n          try {\r\n            try {\r\n              try {\r\n                try {\r\n                  *Fault += 1;\r\n                }\r\n                except(((*Counter += 1) == 1) ? *Fault\r\n                                              : EXCEPTION_CONTINUE_SEARCH) {}\r\n              }\r\n              except(*Counter += 1, EXCEPTION_EXECUTE_HANDLER) { *Fault += 2; }\r\n            }\r\n            except(*Counter += 1, EXCEPTION_CONTINUE_SEARCH) { leave; }\r\n          }\r\n          except(*Counter += 1, EXCEPTION_CONTINUE_SEARCH) { leave; }\r\n        }\r\n        except(EXCEPTION_EXECUTE_HANDLER) {}\r\n      }\r\n      except(EXCEPTION_EXECUTE_HANDLER) {}\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { leave; }\r\n  }\r\n  finally { *Counter += 1; }\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n\r\n{\r\n\r\n  PLONG BadAddress;\r\n  PCHAR BadByte;\r\n  PLONG BlackHole;\r\n  ULONG Index1;\r\n  ULONG Index2 = RED;\r\n  jmp_buf JumpBuffer;\r\n  LONG Counter;\r\n  EXCEPTION_RECORD ExceptionRecord;\r\n  double doubleresult;\r\n\r\n  //\r\n  // Announce start of exception test.\r\n  //\r\n\r\n  printf("Start of exception test\\n");\r\n\r\n  //\r\n  // Initialize exception record.\r\n  //\r\n\r\n  ExceptionRecord.ExceptionCode = STATUS_INTEGER_OVERFLOW;\r\n  ExceptionRecord.ExceptionFlags = 0;\r\n  ExceptionRecord.ExceptionRecord = NULL;\r\n  ExceptionRecord.NumberParameters = 0;\r\n\r\n  //\r\n  // Initialize pointers.\r\n  //\r\n\r\n  BadAddress = (PLONG)NULL;\r\n  BadByte = (PCHAR)NULL;\r\n  BadByte += 1;\r\n  BlackHole = &Counter;\r\n\r\n  //\r\n  // Simply try statement with a finally clause that is entered sequentially.\r\n  //\r\n\r\n  printf("    test1...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n  }\r\n  finally {\r\n    if (abnormal_termination() == FALSE) {\r\n      Counter += 1;\r\n    }\r\n  }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simple try statement with an exception clause that is never executed\r\n  // because there is no exception raised in the try clause.\r\n  //\r\n\r\n  printf("    test2...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n  }\r\n  except(Counter) { Counter += 1; }\r\n\r\n  if (Counter != 1) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simple try statement with an exception handler that is never executed\r\n  // because the exception expression continues execution.\r\n  //\r\n\r\n  printf("    test3...");\r\n  Counter = 0;\r\n  try {\r\n    Counter -= 1;\r\n    RtlRaiseException(&ExceptionRecord);\r\n  }\r\n  except(Counter) { Counter -= 1; }\r\n\r\n  if (Counter != -1) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simple try statement with an exception clause that is always executed.\r\n  //\r\n\r\n  printf("    test4...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n    RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n  }\r\n  except(Counter) { Counter += 1; }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simple try statement with an exception clause that is always executed.\r\n  //\r\n\r\n  printf("    test5...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n    *BlackHole += *BadAddress;\r\n  }\r\n  except(Counter) { Counter += 1; }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simply try statement with a finally clause that is entered as the\r\n  // result of an exception.\r\n  //\r\n\r\n  printf("    test6...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      Counter += 1;\r\n      RtlRaiseException(&ExceptionRecord);\r\n    }\r\n    finally {\r\n      if (abnormal_termination() != FALSE) {\r\n        Counter += 1;\r\n      }\r\n    }\r\n  }\r\n  except(Counter) {\r\n    if (Counter == 2) {\r\n      Counter += 1;\r\n    }\r\n  }\r\n\r\n  if (Counter != 3) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simply try statement with a finally clause that is entered as the\r\n  // result of an exception.\r\n  //\r\n\r\n  printf("    test7...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      Counter += 1;\r\n      *BlackHole += *BadAddress;\r\n    }\r\n    finally {\r\n      if (abnormal_termination() != FALSE) {\r\n        Counter += 1;\r\n      }\r\n    }\r\n  }\r\n  except(Counter) {\r\n    if (Counter == 2) {\r\n      Counter += 1;\r\n    }\r\n  }\r\n\r\n  if (Counter != 3) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simple try that calls a function which raises an exception.\r\n  //\r\n\r\n  printf("    test8...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n    foo1(STATUS_ACCESS_VIOLATION);\r\n  }\r\n  except((GetExceptionCode() == STATUS_ACCESS_VIOLATION)\r\n             ? EXCEPTION_EXECUTE_HANDLER\r\n             : EXCEPTION_CONTINUE_SEARCH) {\r\n    Counter += 1;\r\n  }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simple try that calls a function which raises an exception.\r\n  //\r\n\r\n  printf("    test9...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n    foo2(BlackHole, BadAddress);\r\n  }\r\n  except((GetExceptionCode() == STATUS_ACCESS_VIOLATION)\r\n             ? EXCEPTION_EXECUTE_HANDLER\r\n             : EXCEPTION_CONTINUE_SEARCH) {\r\n    Counter += 1;\r\n  }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simple try that calls a function which calls a function that\r\n  // raises an exception. The first function has a finally clause\r\n  // that must be executed for this test to work.\r\n  //\r\n\r\n  printf("    test10...");\r\n  Counter = 0;\r\n  try {\r\n    bar1(STATUS_ACCESS_VIOLATION, &Counter);\r\n  }\r\n  except((GetExceptionCode() == STATUS_ACCESS_VIOLATION)\r\n             ? EXCEPTION_EXECUTE_HANDLER\r\n             : EXCEPTION_CONTINUE_SEARCH) {\r\n    Counter -= 1;\r\n  }\r\n\r\n  if (Counter != 98) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simple try that calls a function which calls a function that\r\n  // raises an exception. The first function has a finally clause\r\n  // that must be executed for this test to work.\r\n  //\r\n\r\n  printf("    test11...");\r\n  Counter = 0;\r\n  try {\r\n    bar2(BlackHole, BadAddress, &Counter);\r\n  }\r\n  except((GetExceptionCode() == STATUS_ACCESS_VIOLATION)\r\n             ? EXCEPTION_EXECUTE_HANDLER\r\n             : EXCEPTION_CONTINUE_SEARCH) {\r\n    Counter -= 1;\r\n  }\r\n\r\n  if (Counter != 98) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A try within an except\r\n  //\r\n\r\n  printf("    test12...");\r\n  Counter = 0;\r\n  try {\r\n    foo1(STATUS_ACCESS_VIOLATION);\r\n  }\r\n  except((GetExceptionCode() == STATUS_ACCESS_VIOLATION)\r\n             ? EXCEPTION_EXECUTE_HANDLER\r\n             : EXCEPTION_CONTINUE_SEARCH) {\r\n    Counter += 1;\r\n    try {\r\n      foo1(STATUS_SUCCESS);\r\n    }\r\n    except((GetExceptionCode() == STATUS_SUCCESS) ? EXCEPTION_EXECUTE_HANDLER\r\n                                                  : EXCEPTION_CONTINUE_SEARCH) {\r\n      if (Counter != 1) {\r\n        printf("failed, count = %d\\n", Counter);\r\n\r\n      } else {\r\n        printf("succeeded...");\r\n      }\r\n\r\n      Counter += 1;\r\n    }\r\n  }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A try within an except\r\n  //\r\n\r\n  printf("    test13...");\r\n  Counter = 0;\r\n  try {\r\n    foo2(BlackHole, BadAddress);\r\n  }\r\n  except((GetExceptionCode() == STATUS_ACCESS_VIOLATION)\r\n             ? EXCEPTION_EXECUTE_HANDLER\r\n             : EXCEPTION_CONTINUE_SEARCH) {\r\n    Counter += 1;\r\n    try {\r\n      foo1(STATUS_SUCCESS);\r\n    }\r\n    except((GetExceptionCode() == STATUS_SUCCESS) ? EXCEPTION_EXECUTE_HANDLER\r\n                                                  : EXCEPTION_CONTINUE_SEARCH) {\r\n      if (Counter != 1) {\r\n        printf("failed, count = %d\\n", Counter);\r\n\r\n      } else {\r\n        printf("succeeded...");\r\n      }\r\n\r\n      Counter += 1;\r\n    }\r\n  }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n#if !defined(WIN_CE) // gotos from except/finally not allowed on WinCE\r\n  //\r\n  // A goto from an exception clause that needs to pass\r\n  // through a finally\r\n  //\r\n\r\n  printf("    test14...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      foo1(STATUS_ACCESS_VIOLATION);\r\n    }\r\n    except((GetExceptionCode() == STATUS_ACCESS_VIOLATION)\r\n               ? EXCEPTION_EXECUTE_HANDLER\r\n               : EXCEPTION_CONTINUE_SEARCH) {\r\n      Counter += 1;\r\n      goto t9;\r\n    }\r\n  }\r\n  finally { Counter += 1; }\r\n\r\nt9:\r\n  ;\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A goto from an finally clause that needs to pass\r\n  // through a finally\r\n  //\r\n\r\n  printf("    test15...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      Counter += 1;\r\n    }\r\n    finally {\r\n      Counter += 1;\r\n      goto t10;\r\n    }\r\n  }\r\n  finally { Counter += 1; }\r\n\r\nt10:\r\n  ;\r\n  if (Counter != 3) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A goto from an exception clause that needs to pass\r\n  // through a finally into the outer finally clause.\r\n  //\r\n\r\n  printf("    test16...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      try {\r\n        Counter += 1;\r\n        foo1(STATUS_INTEGER_OVERFLOW);\r\n      }\r\n      except(EXCEPTION_EXECUTE_HANDLER) {\r\n        Counter += 1;\r\n        goto t11;\r\n      }\r\n    }\r\n    finally { Counter += 1; }\r\n  t11:\r\n    ;\r\n  }\r\n  finally { Counter += 1; }\r\n\r\n  if (Counter != 4) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A goto from an finally clause that needs to pass\r\n  // through a finally into the outer finally clause.\r\n  //\r\n\r\n  printf("    test17...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      Counter += 1;\r\n    }\r\n    finally {\r\n      Counter += 1;\r\n      goto t12;\r\n    }\r\n  t12:\r\n    ;\r\n  }\r\n  finally { Counter += 1; }\r\n\r\n  if (Counter != 3) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A return from an except clause\r\n  //\r\n\r\n  printf("    test18...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n    eret(STATUS_ACCESS_VIOLATION, &Counter);\r\n  }\r\n  finally { Counter += 1; }\r\n\r\n  if (Counter != 4) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A return from a finally clause\r\n  //\r\n\r\n  printf("    test19...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n    fret(&Counter);\r\n  }\r\n  finally { Counter += 1; }\r\n\r\n  if (Counter != 5) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n#endif\r\n\r\n  //\r\n  // A simple set jump followed by a long jump.\r\n  //\r\n\r\n  printf("    test20...");\r\n  Counter = 0;\r\n  if (setjmp(JumpBuffer) == 0) {\r\n    Counter += 1;\r\n    longjmp(JumpBuffer, 1);\r\n\r\n  } else {\r\n    Counter += 1;\r\n  }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A set jump followed by a long jump out of a finally clause that is\r\n  // sequentially executed.\r\n  //\r\n\r\n  printf("    test21...");\r\n  Counter = 0;\r\n  if (setjmp(JumpBuffer) == 0) {\r\n    try {\r\n      Counter += 1;\r\n    }\r\n    finally {\r\n      Counter += 1;\r\n      longjmp(JumpBuffer, 1);\r\n    }\r\n\r\n  } else {\r\n    Counter += 1;\r\n  }\r\n\r\n  if (Counter != 3) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A set jump within a try clause followed by a long jump out of a\r\n  // finally clause that is sequentially executed.\r\n  //\r\n\r\n  printf("    test22...");\r\n  Counter = 0;\r\n  try {\r\n    if (setjmp(JumpBuffer) == 0) {\r\n      Counter += 1;\r\n\r\n    } else {\r\n      Counter += 1;\r\n    }\r\n  }\r\n  finally {\r\n    Counter += 1;\r\n    if (Counter == 2) {\r\n      Counter += 1;\r\n      longjmp(JumpBuffer, 1);\r\n    }\r\n  }\r\n\r\n  if (Counter != 5) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A set jump followed by a try/except, followed by a try/finally where\r\n  // the try body of the try/finally raises an exception that is handled\r\n  // by the try/excecpt which causes the try/finally to do a long jump out\r\n  // of a finally clause. This will create a collided unwind.\r\n  //\r\n\r\n  printf("    test23...");\r\n  Counter = 0;\r\n  if (setjmp(JumpBuffer) == 0) {\r\n    try {\r\n      try {\r\n        Counter += 1;\r\n        RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n      }\r\n      finally {\r\n        Counter += 1;\r\n        longjmp(JumpBuffer, 1);\r\n      }\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { Counter += 1; }\r\n\r\n  } else {\r\n    Counter += 1;\r\n  }\r\n\r\n  if (Counter != 3) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A set jump followed by a try/except, followed by a several nested\r\n  // try/finally\'s where the inner try body of the try/finally raises an\r\n  // exception that is handled by the try/except which causes the\r\n  // try/finally to do a long jump out of a finally clause. This will\r\n  // create a collided unwind.\r\n  //\r\n\r\n  printf("    test24...");\r\n  Counter = 0;\r\n  if (setjmp(JumpBuffer) == 0) {\r\n    try {\r\n      try {\r\n        try {\r\n          try {\r\n            Counter += 1;\r\n            RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n          }\r\n          finally { Counter += 1; }\r\n        }\r\n        finally {\r\n          Counter += 1;\r\n          longjmp(JumpBuffer, 1);\r\n        }\r\n      }\r\n      finally { Counter += 1; }\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { Counter += 1; }\r\n\r\n  } else {\r\n    Counter += 1;\r\n  }\r\n\r\n  if (Counter != 5) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A set jump followed by a try/except, followed by a try/finally which\r\n  // calls a subroutine which contains a try finally that raises an\r\n  // exception that is handled to the try/except.\r\n  //\r\n\r\n  printf("    test25...");\r\n  Counter = 0;\r\n  if (setjmp(JumpBuffer) == 0) {\r\n    try {\r\n      try {\r\n        try {\r\n          Counter += 1;\r\n          dojump(JumpBuffer, &Counter);\r\n        }\r\n        finally { Counter += 1; }\r\n      }\r\n      finally { Counter += 1; }\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { Counter += 1; }\r\n\r\n  } else {\r\n    Counter += 1;\r\n  }\r\n\r\n  if (Counter != 7) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A set jump followed by a try/except, followed by a try/finally which\r\n  // calls a subroutine which contains a try finally that raises an\r\n  // exception that is handled to the try/except.\r\n  //\r\n\r\n  printf("    test26...");\r\n  Counter = 0;\r\n  if (setjmp(JumpBuffer) == 0) {\r\n    try {\r\n      try {\r\n        try {\r\n          try {\r\n            Counter += 1;\r\n            dojump(JumpBuffer, &Counter);\r\n          }\r\n          finally { Counter += 1; }\r\n        }\r\n        finally {\r\n          Counter += 1;\r\n          longjmp(JumpBuffer, 1);\r\n        }\r\n      }\r\n      finally { Counter += 1; }\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { Counter += 1; }\r\n\r\n  } else {\r\n    Counter += 1;\r\n  }\r\n\r\n  if (Counter != 8) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Test nested exceptions.\r\n  //\r\n\r\n  printf("    test27...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      Counter += 1;\r\n      except1(&Counter);\r\n    }\r\n    except(except2(GetExceptionInformation(), &Counter)) { Counter += 2; }\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { Counter += 3; }\r\n\r\n  if (Counter != 55) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Simple try that causes an integer overflow exception.\r\n  //\r\n\r\n  printf("    test28...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n    addtwo(0x7fff0000, 0x10000, &Counter);\r\n  }\r\n  except((GetExceptionCode() == STATUS_INTEGER_OVERFLOW)\r\n             ? EXCEPTION_EXECUTE_HANDLER\r\n             : EXCEPTION_CONTINUE_SEARCH) {\r\n    Counter += 1;\r\n  }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n//\r\n// Simple try that raises an misaligned data exception.\r\n//\r\n#if !defined(i386) && !defined(_M_IA64) && !defined(_M_AMD64) &&               \\\r\n    !defined(_M_ARM) && !defined(_M_ARM64)\r\n  printf("    test29...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n    foo2(BlackHole, (PLONG)BadByte);\r\n  }\r\n  except((GetExceptionCode() == STATUS_DATATYPE_MISALIGNMENT)\r\n             ? EXCEPTION_EXECUTE_HANDLER\r\n             : EXCEPTION_CONTINUE_SEARCH) {\r\n    Counter += 1;\r\n  }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n#endif\r\n  //\r\n  // Continue from a try body with an exception clause in a loop.\r\n  //\r\n\r\n  printf("    test30...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      if ((Index1 & 0x1) == 0) {\r\n        continue;\r\n\r\n      } else {\r\n        Counter += 1;\r\n      }\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { Counter += 40; }\r\n\r\n    Counter += 2;\r\n  }\r\n\r\n  if (Counter != 15) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n#if !defined(WIN_CE) // gotos from try/finally not allowed on WinCE\r\n  //\r\n  // Continue from a try body with an finally clause in a loop.\r\n  //\r\n\r\n  printf("    test31...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      if ((Index1 & 0x1) == 0) {\r\n        continue;\r\n\r\n      } else {\r\n        Counter += 1;\r\n      }\r\n    }\r\n    finally { Counter += 2; }\r\n\r\n    Counter += 3;\r\n  }\r\n\r\n  if (Counter != 40) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n#endif\r\n\r\n  //\r\n  // Continue from doubly nested try body with an exception clause in a\r\n  // loop.\r\n  //\r\n\r\n  printf("    test32...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 0) {\r\n          continue;\r\n\r\n        } else {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      except(EXCEPTION_EXECUTE_HANDLER) { Counter += 10; }\r\n\r\n      Counter += 2;\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { Counter += 20; }\r\n\r\n    Counter += 3;\r\n  }\r\n\r\n  if (Counter != 30) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n#if !defined(WIN_CE) // gotos from try/finally not allowed on WinCE\r\n  //\r\n  // Continue from doubly nested try body with an finally clause in a loop.\r\n  //\r\n\r\n  printf("    test33...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 0) {\r\n          continue;\r\n\r\n        } else {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      finally { Counter += 2; }\r\n\r\n      Counter += 3;\r\n    }\r\n    finally { Counter += 4; }\r\n\r\n    Counter += 5;\r\n  }\r\n\r\n  if (Counter != 105) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Continue from a finally clause in a loop.\r\n  //\r\n\r\n  printf("    test34...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      if ((Index1 & 0x1) == 0) {\r\n        Counter += 1;\r\n      }\r\n    }\r\n    finally {\r\n      Counter += 2;\r\n      continue;\r\n    }\r\n\r\n    Counter += 4;\r\n  }\r\n\r\n  if (Counter != 25) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Continue from a doubly nested finally clause in a loop.\r\n  //\r\n\r\n  printf("    test35...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 0) {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      finally {\r\n        Counter += 2;\r\n        continue;\r\n      }\r\n\r\n      Counter += 4;\r\n    }\r\n    finally { Counter += 5; }\r\n\r\n    Counter += 6;\r\n  }\r\n\r\n  if (Counter != 75) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Continue from a doubly nested finally clause in a loop.\r\n  //\r\n\r\n  printf("    test36...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 0) {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      finally { Counter += 2; }\r\n\r\n      Counter += 4;\r\n    }\r\n    finally {\r\n      Counter += 5;\r\n      continue;\r\n    }\r\n\r\n    Counter += 6;\r\n  }\r\n\r\n  if (Counter != 115) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n#endif\r\n\r\n  //\r\n  // Break from a try body with an exception clause in a loop.\r\n  //\r\n\r\n  printf("    test37...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      if ((Index1 & 0x1) == 1) {\r\n        break;\r\n\r\n      } else {\r\n        Counter += 1;\r\n      }\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { Counter += 40; }\r\n\r\n    Counter += 2;\r\n  }\r\n\r\n  if (Counter != 3) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n#if !defined(WIN_CE) // gotos from try/finally not allowed on WinCE\r\n  //\r\n  // Break from a try body with an finally clause in a loop.\r\n  //\r\n\r\n  printf("    test38...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      if ((Index1 & 0x1) == 1) {\r\n        break;\r\n\r\n      } else {\r\n        Counter += 1;\r\n      }\r\n    }\r\n    finally { Counter += 2; }\r\n\r\n    Counter += 3;\r\n  }\r\n\r\n  if (Counter != 8) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n#endif\r\n\r\n  //\r\n  // Break from doubly nested try body with an exception clause in a\r\n  // loop.\r\n  //\r\n\r\n  printf("    test39...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 1) {\r\n          break;\r\n\r\n        } else {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      except(EXCEPTION_EXECUTE_HANDLER) { Counter += 10; }\r\n\r\n      Counter += 2;\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { Counter += 20; }\r\n\r\n    Counter += 3;\r\n  }\r\n\r\n  if (Counter != 6) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n#if !defined(WIN_CE) // gotos from try/finally not allowed on WinCE\r\n  //\r\n  // Break from doubly nested try body with an finally clause in a loop.\r\n  //\r\n\r\n  printf("    test40...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 1) {\r\n          break;\r\n\r\n        } else {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      finally { Counter += 2; }\r\n\r\n      Counter += 3;\r\n    }\r\n    finally { Counter += 4; }\r\n\r\n    Counter += 5;\r\n  }\r\n\r\n  if (Counter != 21) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Break from a finally clause in a loop.\r\n  //\r\n\r\n  printf("    test41...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      if ((Index1 & 0x1) == 1) {\r\n        Counter += 1;\r\n      }\r\n    }\r\n    finally {\r\n      Counter += 2;\r\n      break;\r\n    }\r\n\r\n    Counter += 4;\r\n  }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Break from a doubly nested finally clause in a loop.\r\n  //\r\n\r\n  printf("    test42...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 1) {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      finally {\r\n        Counter += 2;\r\n        break;\r\n      }\r\n\r\n      Counter += 4;\r\n    }\r\n    finally { Counter += 5; }\r\n\r\n    Counter += 6;\r\n  }\r\n\r\n  if (Counter != 7) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Break from a doubly nested finally clause in a loop.\r\n  //\r\n\r\n  printf("    test43...");\r\n  Counter = 0;\r\n  for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 1) {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      finally { Counter += 2; }\r\n\r\n      Counter += 4;\r\n    }\r\n    finally {\r\n      Counter += 5;\r\n      break;\r\n    }\r\n\r\n    Counter += 6;\r\n  }\r\n\r\n  if (Counter != 11) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n#endif\r\n\r\n  //\r\n  // Break from a try body with an exception clause in a switch.\r\n  //\r\n\r\n  printf("    test44...");\r\n  Counter = 0;\r\n  Index1 = 1;\r\n  switch (Index2) {\r\n  case BLUE:\r\n    Counter += 100;\r\n    break;\r\n\r\n  case RED:\r\n    try {\r\n      if ((Index1 & 0x1) == 1) {\r\n        break;\r\n\r\n      } else {\r\n        Counter += 1;\r\n      }\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { Counter += 40; }\r\n\r\n    Counter += 2;\r\n    break;\r\n  }\r\n\r\n  if (Counter != 0) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n#if !defined(WIN_CE) // gotos from try/finally not allowed on WinCE\r\n  //\r\n  // Break from a try body with an finally clause in a switch.\r\n  //\r\n\r\n  printf("    test45...");\r\n  Counter = 0;\r\n  Index1 = 1;\r\n  switch (Index2) {\r\n  case BLUE:\r\n    Counter += 100;\r\n    break;\r\n\r\n  case RED:\r\n    try {\r\n      if ((Index1 & 0x1) == 1) {\r\n        break;\r\n\r\n      } else {\r\n        Counter += 1;\r\n      }\r\n    }\r\n    finally { Counter += 2; }\r\n\r\n    Counter += 3;\r\n  }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n#endif\r\n\r\n  //\r\n  // Break from doubly nested try body with an exception clause in a\r\n  // switch.\r\n  //\r\n\r\n  printf("    test46...");\r\n  Counter = 0;\r\n  Index1 = 1;\r\n  switch (Index2) {\r\n  case BLUE:\r\n    Counter += 100;\r\n    break;\r\n\r\n  case RED:\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 1) {\r\n          break;\r\n\r\n        } else {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      except(EXCEPTION_EXECUTE_HANDLER) { Counter += 10; }\r\n\r\n      Counter += 2;\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { Counter += 20; }\r\n\r\n    Counter += 3;\r\n  }\r\n\r\n  if (Counter != 0) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n#if !defined(WIN_CE) // gotos from try/finally not allowed on WinCE\r\n  //\r\n  // Break from doubly nested try body with an finally clause in a switch.\r\n  //\r\n\r\n  printf("    test47...");\r\n  Counter = 0;\r\n  Index1 = 1;\r\n  switch (Index2) {\r\n  case BLUE:\r\n    Counter += 100;\r\n    break;\r\n\r\n  case RED:\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 1) {\r\n          break;\r\n\r\n        } else {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      finally { Counter += 2; }\r\n\r\n      Counter += 3;\r\n    }\r\n    finally { Counter += 4; }\r\n\r\n    Counter += 5;\r\n  }\r\n\r\n  if (Counter != 6) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Break from a finally clause in a switch.\r\n  //\r\n\r\n  printf("    test48...");\r\n  Counter = 0;\r\n  Index1 = 1;\r\n  switch (Index2) {\r\n  case BLUE:\r\n    Counter += 100;\r\n    break;\r\n\r\n  case RED:\r\n    try {\r\n      if ((Index1 & 0x1) == 1) {\r\n        Counter += 1;\r\n      }\r\n    }\r\n    finally {\r\n      Counter += 2;\r\n      break;\r\n    }\r\n\r\n    Counter += 4;\r\n  }\r\n\r\n  if (Counter != 3) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Break from a doubly nested finally clause in a switch.\r\n  //\r\n\r\n  printf("    test49...");\r\n  Counter = 0;\r\n  Index1 = 1;\r\n  switch (Index2) {\r\n  case BLUE:\r\n    Counter += 100;\r\n    break;\r\n\r\n  case RED:\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 1) {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      finally {\r\n        Counter += 2;\r\n        break;\r\n      }\r\n\r\n      Counter += 4;\r\n    }\r\n    finally { Counter += 5; }\r\n\r\n    Counter += 6;\r\n  }\r\n\r\n  if (Counter != 8) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Break from a doubly nested finally clause in a switch.\r\n  //\r\n\r\n  printf("    test50...");\r\n  Counter = 0;\r\n  Index1 = 1;\r\n  switch (Index2) {\r\n  case BLUE:\r\n    Counter += 100;\r\n    break;\r\n\r\n  case RED:\r\n    try {\r\n      try {\r\n        if ((Index1 & 0x1) == 1) {\r\n          Counter += 1;\r\n        }\r\n      }\r\n      finally { Counter += 2; }\r\n\r\n      Counter += 4;\r\n    }\r\n    finally {\r\n      Counter += 5;\r\n      break;\r\n    }\r\n\r\n    Counter += 6;\r\n  }\r\n\r\n  if (Counter != 12) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n#endif\r\n\r\n  //\r\n  // Leave from an if in a simple try/finally.\r\n  //\r\n\r\n  printf("    test51...");\r\n  Counter = 0;\r\n  try {\r\n    if (Echo(Counter) == Counter) {\r\n      Counter += 3;\r\n      leave;\r\n\r\n    } else {\r\n      Counter += 100;\r\n    }\r\n  }\r\n  finally {\r\n    if (abnormal_termination() == FALSE) {\r\n      Counter += 5;\r\n    }\r\n  }\r\n\r\n  if (Counter != 8) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Leave from a loop in a simple try/finally.\r\n  //\r\n\r\n  printf("    test52...");\r\n  Counter = 0;\r\n  try {\r\n    for (Index1 = 0; Index1 < 10; Index1 += 1) {\r\n      if (Echo(Index1) == Index1) {\r\n        Counter += 3;\r\n        leave;\r\n      }\r\n\r\n      Counter += 100;\r\n    }\r\n  }\r\n  finally {\r\n    if (abnormal_termination() == FALSE) {\r\n      Counter += 5;\r\n    }\r\n  }\r\n\r\n  if (Counter != 8) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Leave from a switch in a simple try/finally.\r\n  //\r\n\r\n  printf("    test53...");\r\n  Counter = 0;\r\n  try {\r\n    switch (Index2) {\r\n    case BLUE:\r\n      break;\r\n\r\n    case RED:\r\n      Counter += 3;\r\n      leave;\r\n    }\r\n\r\n    Counter += 100;\r\n  }\r\n  finally {\r\n    if (abnormal_termination() == FALSE) {\r\n      Counter += 5;\r\n    }\r\n  }\r\n\r\n  if (Counter != 8) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Leave from an if in doubly nested try/finally followed by a leave\r\n  // from an if in the outer try/finally.\r\n  //\r\n\r\n  printf("    test54...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      if (Echo(Counter) == Counter) {\r\n        Counter += 3;\r\n        leave;\r\n\r\n      } else {\r\n        Counter += 100;\r\n      }\r\n    }\r\n    finally {\r\n      if (abnormal_termination() == FALSE) {\r\n        Counter += 5;\r\n      }\r\n    }\r\n\r\n    if (Echo(Counter) == Counter) {\r\n      Counter += 3;\r\n      leave;\r\n\r\n    } else {\r\n      Counter += 100;\r\n    }\r\n  }\r\n  finally {\r\n    if (abnormal_termination() == FALSE) {\r\n      Counter += 5;\r\n    }\r\n  }\r\n\r\n  if (Counter != 16) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n#if !defined(WIN_CE) // leave from finally not allowed on WinCE\r\n  //\r\n  // Leave from an if in doubly nested try/finally followed by a leave\r\n  // from the finally of the outer try/finally.\r\n  //\r\n\r\n  printf("    test55...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      if (Echo(Counter) == Counter) {\r\n        Counter += 3;\r\n        leave;\r\n\r\n      } else {\r\n        Counter += 100;\r\n      }\r\n    }\r\n    finally {\r\n      if (abnormal_termination() == FALSE) {\r\n        Counter += 5;\r\n        leave;\r\n      }\r\n    }\r\n\r\n    Counter += 100;\r\n  }\r\n  finally {\r\n    if (abnormal_termination() == FALSE) {\r\n      Counter += 5;\r\n    }\r\n  }\r\n\r\n  if (Counter != 13) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n#endif\r\n\r\n  //\r\n  // Try/finally within the except clause of a try/except that is always\r\n  // executed.\r\n  //\r\n\r\n  printf("    test56...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n    RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n  }\r\n  except(Counter) {\r\n    try {\r\n      Counter += 3;\r\n    }\r\n    finally {\r\n      if (abnormal_termination() == FALSE) {\r\n        Counter += 5;\r\n      }\r\n    }\r\n  }\r\n\r\n  if (Counter != 9) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Try/finally within the finally clause of a try/finally.\r\n  //\r\n\r\n  printf("    test57...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n  }\r\n  finally {\r\n    if (abnormal_termination() == FALSE) {\r\n      try {\r\n        Counter += 3;\r\n      }\r\n      finally {\r\n        if (abnormal_termination() == FALSE) {\r\n          Counter += 5;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (Counter != 9) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Try/except within the finally clause of a try/finally.\r\n  //\r\n\r\n  printf("    test58...");\r\n#if !defined(NEST_IN_FINALLY)\r\n  printf("skipped\\n");\r\n#else\r\n  Counter = 0;\r\n  try {\r\n    Counter -= 1;\r\n  }\r\n  finally {\r\n    try {\r\n      Counter += 2;\r\n      RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n    }\r\n    except(Counter) {\r\n      try {\r\n        Counter += 3;\r\n      }\r\n      finally {\r\n        if (abnormal_termination() == FALSE) {\r\n          Counter += 5;\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  if (Counter != 9) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n#endif /* def(NEST_IN_FINALLY) */\r\n\r\n  //\r\n  // Try/except within the except clause of a try/except that is always\r\n  // executed.\r\n  //\r\n\r\n  printf("    test59...");\r\n  Counter = 0;\r\n  try {\r\n    Counter += 1;\r\n    RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n  }\r\n  except(Counter) {\r\n    try {\r\n      Counter += 3;\r\n      RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n    }\r\n    except(Counter - 3) { Counter += 5; }\r\n  }\r\n\r\n  if (Counter != 9) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Try with a Try which exits the scope with a goto\r\n  //\r\n\r\n  printf("    test60...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      goto outside;\r\n    }\r\n    except(1) { Counter += 1; }\r\n\r\n  outside:\r\n    RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n  }\r\n  except(1) { Counter += 3; }\r\n\r\n  if (Counter != 3) {\r\n    printf("failed, count = %d\\n", Counter);\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Try/except which gets an exception from a subfunction within\r\n  // a try/finally which has a try/except in the finally clause\r\n  //\r\n\r\n  printf("    test61...");\r\n#if !defined(NEST_IN_FINALLY)\r\n  printf("skipped\\n");\r\n#else\r\n  Counter = 0;\r\n  try {\r\n    Test61Part2(&Counter);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { Counter += 11; }\r\n\r\n  if (Counter != 24) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n#endif /* def(NEST_IN_FINALLY) */\r\n\r\n  //\r\n  // Check for precision of exception on floating point\r\n  //\r\n\r\n  printf("    test62...");\r\n\r\n#if defined(i386) || defined(_M_IA64) || defined(_M_ALPHA) || defined(_M_AMD64)\r\n\r\n/* enable floating point overflow */\r\n#if defined(i386)\r\n  _control87(_control87(0, 0) & ~EM_OVERFLOW, _MCW_EM);\r\n#else\r\n  //\r\n  // use portable version of _control87\r\n  //\r\n  _controlfp(_controlfp(0, 0) & ~EM_OVERFLOW, _MCW_EM);\r\n#endif\r\n\r\n  Counter = 0;\r\n  try {\r\n    doubleresult = SquareDouble(1.7e300);\r\n\r\n    try {\r\n      doubleresult = SquareDouble(1.0);\r\n    }\r\n    except(1) { Counter += 3; }\r\n  }\r\n  except(1) { Counter += 1; }\r\n\r\n  if (Counter != 1) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n/* clear up pending unmasked exceptions and restore FP control registers */\r\n#if defined(i386)\r\n  _clear87();\r\n  _control87(_control87(0, 0) | EM_OVERFLOW, 0xfffff);\r\n#else\r\n  _clearfp();\r\n  _controlfp(_controlfp(0, 0) | EM_OVERFLOW, 0xfffff);\r\n#endif\r\n\r\n#else\r\n  printf("skipped\\n");\r\n#endif\r\n\r\n  //\r\n  // A try/finally inside a try/except where an exception is raised in the\r\n  // try/finally.\r\n  //\r\n\r\n  printf("    test63...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      Counter += 1;\r\n    }\r\n    finally {\r\n      Counter += 3;\r\n      RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n    }\r\n  }\r\n  except(1) { Counter += 6; }\r\n\r\n  if (Counter != 10) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A try/finally inside a try/except where an exception is raised in the\r\n  // in the try/except and the try/finally.\r\n  //\r\n\r\n  printf("    test64...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      Counter += 1;\r\n      RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n    }\r\n    finally {\r\n      Counter += 3;\r\n      RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n    }\r\n  }\r\n  except(1) { Counter += 6; }\r\n\r\n  if (Counter != 10) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A try/finally inside a try/except where an exception is raised in the\r\n  // try/finally.\r\n  //\r\n\r\n  printf("    test65...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      Counter += 1;\r\n    }\r\n    finally {\r\n      Counter += 3;\r\n      *BlackHole += *BadAddress;\r\n      Counter += 13;\r\n    }\r\n  }\r\n  except(1) { Counter += 6; }\r\n\r\n  if (Counter != 10) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A try/finally inside a try/except where an exception is raised in the\r\n  // in the try/except and the try/finally.\r\n  //\r\n\r\n  printf("    test66...");\r\n  Counter = 0;\r\n  try {\r\n    try {\r\n      Counter += 1;\r\n      *BlackHole += *BadAddress;\r\n      Counter += 13;\r\n    }\r\n    finally {\r\n      Counter += 3;\r\n      *BlackHole += *BadAddress;\r\n      Counter += 13;\r\n    }\r\n  }\r\n  except(1) { Counter += 6; }\r\n\r\n  if (Counter != 10) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A try/finally inside a try/finally inside a try/except where an\r\n  // exception is raised in the in the try/except and in try/finally.\r\n  //\r\n\r\n  printf("    test67...");\r\n  try {\r\n    try {\r\n      *BlackHole += *BadAddress;\r\n    }\r\n    finally {\r\n      try {\r\n        Counter = 0;\r\n      }\r\n      finally {\r\n        if (Counter != 0) {\r\n          Counter += 1;\r\n        }\r\n      }\r\n\r\n      Counter += 1;\r\n      *BlackHole += *BadAddress;\r\n    }\r\n  }\r\n  except(1) { Counter += 1; }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // A try/finally inside a try/finally inside a try/except where an\r\n  // exception is raised in the in the try/except and in try/finally.\r\n  //\r\n\r\n  printf("    test68...");\r\n  try {\r\n    try {\r\n      RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n    }\r\n    finally {\r\n      try {\r\n        Counter = 0;\r\n      }\r\n      finally {\r\n        if (Counter != 0) {\r\n          Counter += 1;\r\n        }\r\n      }\r\n\r\n      Counter += 1;\r\n      RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n    }\r\n  }\r\n  except(1) { Counter += 1; }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n//\r\n// Patch guard test 69.\r\n//\r\n\r\n#if defined(_AMD64_) || defined(_X86_)\r\n\r\n  printf("    test69...");\r\n  Counter = 0;\r\n  try {\r\n    PgTest69(&Counter, BadAddress);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { printf("unexpected exception..."); }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test70...");\r\n  Counter = 0;\r\n  try {\r\n    PgTest70(&Counter, BadAddress);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { printf("unexpected exception..."); }\r\n\r\n  if (Counter != 2) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test71...");\r\n  Counter = 0;\r\n  try {\r\n    PgTest71(&Counter, BadAddress);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { printf("unexpected exception..."); }\r\n\r\n  if (Counter != 9) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test72...");\r\n  Counter = 0;\r\n  try {\r\n    PgTest72(&Counter, BadAddress);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { printf("unexpected exception..."); }\r\n\r\n  if (Counter != 12) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test73...");\r\n  Counter = 0;\r\n  try {\r\n    PgTest73(&Counter, BadAddress);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { printf("unexpected exception..."); }\r\n\r\n  if (Counter != 15) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test74...");\r\n  Counter = 0;\r\n  try {\r\n    PgTest74(&Counter, BadAddress);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { printf("unexpected exception..."); }\r\n\r\n  if (Counter != 18) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test75...");\r\n  Counter = 0;\r\n  try {\r\n    PgTest75(&Counter, BadAddress);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { printf("unexpected exception..."); }\r\n\r\n  if (Counter != 35) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test76...");\r\n  Counter = 0;\r\n  try {\r\n    PgTest76(&Counter, BadAddress);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { printf("unexpected exception..."); }\r\n\r\n  if (Counter != 40) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test77...");\r\n  Counter = 0;\r\n  try {\r\n    PgTest77(&Counter, BadAddress);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { printf("unexpected exception..."); }\r\n\r\n  if (Counter != 45) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test78...");\r\n  Counter = 0;\r\n  try {\r\n    PgTest78(&Counter, BadAddress);\r\n  }\r\n  except(EXCEPTION_EXECUTE_HANDLER) { printf("unexpected exception..."); }\r\n\r\n  if (Counter != 50) {\r\n    printf("failed, count = %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n#else\r\n  printf("    test69...filter entered...succeeded\\n");\r\n  printf("    test70...filter entered...succeeded\\n");\r\n  printf("    test71...filter entered...succeeded\\n");\r\n  printf("    test72...filter entered...succeeded\\n");\r\n  printf("    test73...filter entered...succeeded\\n");\r\n  printf("    test74...filter entered...succeeded\\n");\r\n  printf("    test75...filter entered...succeeded\\n");\r\n  printf("    test76...filter entered...succeeded\\n");\r\n  printf("    test77...filter entered...succeeded\\n");\r\n  printf("    test78...filter entered...succeeded\\n");\r\n#endif\r\n\r\n  if (LOBYTE(LOWORD(GetVersion())) < 6) {\r\n    printf("    test79...");\r\n    printf("filter 1...filter 2...finally 1...filter 1...filter 2...finally "\r\n           "2...passed\\n");\r\n  } else {\r\n\r\n    printf("    test79...");\r\n    Counter = 0;\r\n    try {\r\n      Test79(&Counter, BadAddress);\r\n    }\r\n    except(printf("filter 2..."), EXCEPTION_EXECUTE_HANDLER) { Counter += 1; }\r\n\r\n    if (Counter == 3) {\r\n      printf("passed\\n");\r\n\r\n    } else {\r\n      printf("failed  %d \\n", Counter);\r\n    }\r\n  }\r\n\r\n  printf("    test80...");\r\n  if (Test80() != 0) {\r\n    printf("failed\\n");\r\n\r\n  } else {\r\n    printf("passed\\n");\r\n  }\r\n\r\n  printf("    test81...");\r\n  Counter = 0;\r\n  Test81(&Counter);\r\n  if (Counter != 1) {\r\n    printf("failed  %d \\n", Counter);\r\n\r\n  } else {\r\n    printf("passed\\n");\r\n  }\r\n\r\n  printf("    test82...");\r\n  Counter = 1;\r\n  Test82(&Counter);\r\n  if (Counter != 0) {\r\n    printf("failed\\n");\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test83...");\r\n  if (Test83() != 0) {\r\n    printf("failed\\n");\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test84...");\r\n  Counter = 0;\r\n  Test84(&Counter);\r\n  if (Counter != 2) {\r\n    printf("failed\\n");\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test85...");\r\n  Counter = 0;\r\n  Test85(&Counter);\r\n  if (Counter != 7) {\r\n    printf("failed\\n");\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test86...");\r\n  Counter = 0;\r\n  Test86(&Counter);\r\n  if (Counter != 4) {\r\n    printf("failed %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test87...");\r\n  Counter = 0;\r\n  Test87(&Counter);\r\n  if (Counter != 104) {\r\n    printf("failed %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  printf("    test88...");\r\n  Counter = 0;\r\n  Test88(&Counter);\r\n  if (Counter != 6) {\r\n    printf("failed %d\\n", Counter);\r\n\r\n  } else {\r\n    printf("succeeded\\n");\r\n  }\r\n\r\n  //\r\n  // Announce end of exception test.\r\n  //\r\n\r\n  printf("End of exception test\\n");\r\n  return;\r\n}\r\n\r\n#pragma optimize("a", off)\r\nVOID addtwo(long First, long Second, long *Place)\r\n\r\n{\r\n\r\n  RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n  *Place = First + Second;\r\n  return;\r\n}\r\n#pragma optimize("", on)\r\n\r\nVOID bar1(IN NTSTATUS Status, IN PLONG Counter) {\r\n\r\n  try {\r\n    foo1(Status);\r\n  }\r\n  finally {\r\n    if (abnormal_termination() != FALSE) {\r\n      *Counter = 99;\r\n\r\n    } else {\r\n      *Counter = 100;\r\n    }\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID bar2(IN PLONG BlackHole, IN PLONG BadAddress, IN PLONG Counter) {\r\n\r\n  try {\r\n    foo2(BlackHole, BadAddress);\r\n  }\r\n  finally {\r\n    if (abnormal_termination() != FALSE) {\r\n      *Counter = 99;\r\n\r\n    } else {\r\n      *Counter = 100;\r\n    }\r\n  }\r\n\r\n  return;\r\n}\r\n\r\nVOID dojump(IN jmp_buf JumpBuffer, IN PLONG Counter)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      *Counter += 1;\r\n      RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n    }\r\n    finally { *Counter += 1; }\r\n  }\r\n  finally {\r\n    *Counter += 1;\r\n    longjmp(JumpBuffer, 1);\r\n  }\r\n}\r\n\r\n#if !defined(WIN_CE) // return through finally not allowed on WinCE\r\nVOID eret(IN NTSTATUS Status, IN PLONG Counter)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      foo1(Status);\r\n    }\r\n    except((GetExceptionCode() == Status) ? EXCEPTION_EXECUTE_HANDLER\r\n                                          : EXCEPTION_CONTINUE_SEARCH) {\r\n      *Counter += 1;\r\n      return;\r\n    }\r\n  }\r\n  finally { *Counter += 1; }\r\n\r\n  return;\r\n}\r\n#endif\r\n\r\nVOID except1(IN PLONG Counter)\r\n\r\n{\r\n\r\n  try {\r\n    *Counter += 5;\r\n    RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n  }\r\n  except(except3(GetExceptionInformation(), Counter)) { *Counter += 7; }\r\n\r\n  *Counter += 9;\r\n  return;\r\n}\r\n\r\nULONG\r\nexcept2(IN PEXCEPTION_POINTERS ExceptionPointers, IN PLONG Counter)\r\n\r\n{\r\n\r\n  PEXCEPTION_RECORD ExceptionRecord;\r\n\r\n  ExceptionRecord = ExceptionPointers->ExceptionRecord;\r\n  if ((ExceptionRecord->ExceptionCode == STATUS_UNSUCCESSFUL) &&\r\n      ((ExceptionRecord->ExceptionFlags & EXCEPTION_NESTED_CALL) == 0)) {\r\n    *Counter += 11;\r\n    return EXCEPTION_EXECUTE_HANDLER;\r\n\r\n  } else {\r\n    *Counter += 13;\r\n    return EXCEPTION_CONTINUE_SEARCH;\r\n  }\r\n}\r\n\r\nULONG\r\nexcept3(IN PEXCEPTION_POINTERS ExceptionPointers, IN PLONG Counter)\r\n\r\n{\r\n\r\n  PEXCEPTION_RECORD ExceptionRecord;\r\n\r\n  ExceptionRecord = ExceptionPointers->ExceptionRecord;\r\n  if ((ExceptionRecord->ExceptionCode == STATUS_INTEGER_OVERFLOW) &&\r\n      ((ExceptionRecord->ExceptionFlags & EXCEPTION_NESTED_CALL) == 0)) {\r\n    *Counter += 17;\r\n    RtlRaiseStatus(STATUS_UNSUCCESSFUL);\r\n\r\n  } else if ((ExceptionRecord->ExceptionCode == STATUS_UNSUCCESSFUL) &&\r\n             ((ExceptionRecord->ExceptionFlags & EXCEPTION_NESTED_CALL) != 0)) {\r\n    *Counter += 19;\r\n    return EXCEPTION_CONTINUE_SEARCH;\r\n  }\r\n\r\n  *Counter += 23;\r\n  return EXCEPTION_EXECUTE_HANDLER;\r\n}\r\n\r\nVOID foo1(IN NTSTATUS Status)\r\n\r\n{\r\n\r\n  //\r\n  // Raise exception.\r\n  //\r\n\r\n  RtlRaiseStatus(Status);\r\n  return;\r\n}\r\n\r\nVOID foo2(IN PLONG BlackHole, IN PLONG BadAddress)\r\n\r\n{\r\n\r\n  //\r\n  // Raise exception.\r\n  //\r\n\r\n  *BlackHole += *BadAddress;\r\n  return;\r\n}\r\n\r\n#if !defined(WIN_CE) // return from finally not allowed on WinCE\r\nVOID fret(IN PLONG Counter)\r\n\r\n{\r\n\r\n  try {\r\n    try {\r\n      *Counter += 1;\r\n    }\r\n    finally {\r\n      *Counter += 1;\r\n      return;\r\n    }\r\n  }\r\n  finally { *Counter += 1; }\r\n\r\n  return;\r\n}\r\n#endif\r\n\r\nLONG Echo(IN LONG Value)\r\n\r\n{\r\n  return Value;\r\n}\r\n\r\n#if defined(NEST_IN_FINALLY)\r\nVOID Test61Part2(IN OUT PULONG Counter) {\r\n  try {\r\n    *Counter -= 1;\r\n    RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n  }\r\n  finally {\r\n    try {\r\n      *Counter += 2;\r\n      RtlRaiseStatus(STATUS_INTEGER_OVERFLOW);\r\n    }\r\n    except(EXCEPTION_EXECUTE_HANDLER) { *Counter += 5; }\r\n    *Counter += 7;\r\n  }\r\n}\r\n#endif /* def(NEST_IN_FINALLY) */\r\n\r\ndouble SquareDouble(IN double op) {\r\n  return exp(2.0 * log(op));\r\n}\r\n'}}]);
//# sourceMappingURL=1401.js.map