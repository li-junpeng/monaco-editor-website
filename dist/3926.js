"use strict";(self.webpackChunkmy_application=self.webpackChunkmy_application||[]).push([[3926],{9867:(r,n,e)=>{e.r(n),e.d(n,{default:()=>t});const t='# GraphQL Schema Definition Language\r\n\r\n"""\r\nColor value\r\n"""\r\nscalar Color\r\n\r\n"""\r\nNode interface\r\n\r\n- allows (re)fetch arbitrary entity only by ID\r\n- allows client side cache normalization\r\n\r\nSee [Relay Global Object Identification Specification](https://facebook.github.io/relay/graphql/objectidentification.htm)\r\n"""\r\ninterface Node {\r\n  """\r\n  Globally unique identifier,\r\n  typically `${__typename}:${dbId}`\r\n  may be encoded in *base64*\r\n  """\r\n  id: ID!\r\n}\r\n\r\n"""\r\nA character in the Star Wars Trilogy\r\n"""\r\ninterface Character {\r\n  """\r\n  The id of the character.\r\n  """\r\n  id: ID!\r\n\r\n  """\r\n  The name of the character.\r\n  """\r\n  name: String\r\n\r\n  """\r\n  The friends of the character, or an empty list if they have none.\r\n  """\r\n  friends: [Character]\r\n\r\n  """\r\n  Which movies they appear in\r\n  """\r\n  appearsIn: [Episode]\r\n\r\n  """\r\n  All secrets about their past\r\n  """\r\n  secretBackstory: String\r\n}\r\n\r\n"""\r\nA mechanical creature in the Star Wars universe.\r\n"""\r\ntype Droid implements Character {\r\n  """\r\n  The id of the droid.\r\n  """\r\n  id: ID!\r\n\r\n  """\r\n  The name of the droid.\r\n  """\r\n  name: String\r\n\r\n  """\r\n  The friends of the droid, or an empty list if they have none.\r\n  """\r\n  friends: [Character]\r\n\r\n  """\r\n  Which movies they appear in.\r\n  """\r\n  appearsIn: [Episode]\r\n\r\n  """\r\n  Construction date and the name of the designer.\r\n  """\r\n  secretBackstory: String\r\n\r\n  """\r\n  The primary function of the droid.\r\n  """\r\n  primaryFunction: String\r\n\r\n  """\r\n  Chase color of the droid.\r\n  """\r\n  color: Color\r\n}\r\n\r\n# One of the films in the Star Wars Trilogy\r\nenum Episode {\r\n  """\r\n  Released in 1977.\r\n  """\r\n  NEWHOPE\r\n\r\n  """\r\n  Released in 1980.\r\n  """\r\n  EMPIRE\r\n\r\n  """\r\n  Released in 1983.\r\n  """\r\n  JEDI\r\n}\r\n\r\n"""\r\nA humanoid creature in the Star Wars universe.\r\n"""\r\ntype Human implements Character {\r\n  """\r\n  The id of the human.\r\n  """\r\n  id: ID!\r\n\r\n  """\r\n  The name of the human.\r\n  """\r\n  name: String\r\n\r\n  """\r\n  The friends of the human, or an empty list if they have none.\r\n  """\r\n  friends: [Character]\r\n\r\n  """\r\n  Which movies they appear in.\r\n  """\r\n  appearsIn: [Episode]\r\n\r\n  """\r\n  The home planet of the human, or null if unknown.\r\n  """\r\n  homePlanet: String\r\n\r\n  """\r\n  Where are they from and how they came to be who they are.\r\n  """\r\n  secretBackstory: String\r\n}\r\n\r\nenum LengthUnit {\r\n  METER\r\n  FEET\r\n}\r\n\r\ntype Starship {\r\n  id: ID!\r\n  name: String!\r\n  length(unit: LengthUnit = METER): Float\r\n}\r\n\r\nunion SearchResult = Human | Droid | Starship\r\n\r\ninput SearchInput {\r\n  name: String\r\n  episode: Episode\r\n}\r\n\r\n"""\r\nRoot Query\r\n"""\r\ntype Query {\r\n  """\r\n  Return the hero by episode.\r\n  """\r\n  hero(\r\n    """\r\n    If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode.\r\n    """\r\n    episode: Episode\r\n  ): Character\r\n\r\n  """\r\n  Return the Human by ID.\r\n  """\r\n  human(\r\n    """\r\n    id of the human\r\n    """\r\n    id: ID!\r\n  ): Human\r\n\r\n  """\r\n  Return the Droid by ID.\r\n  """\r\n  droid(\r\n    """\r\n    id of the droid\r\n    """\r\n    id: ID!\r\n  ): Droid\r\n\r\n  """\r\n  Search everything by name\r\n\r\n  __NOTE__: You should use Relay pagination\r\n  """\r\n  search(search: SearchInput!): [SearchResult]\r\n    @deprecated(reason: "`search` will be replaced.")\r\n}\r\n\r\n"""\r\nRoot Mutation\r\n"""\r\ntype Mutation {\r\n  """\r\n  Save the favorite episode.\r\n  """\r\n  favorite(\r\n    """\r\n    Favorite episode.\r\n    """\r\n    episode: Episode!\r\n  ): Episode\r\n}\r\n\r\n"""\r\nSubscriptions â€” live events\r\n"""\r\ntype Subscription {\r\n  """\r\n  Message\r\n  """\r\n  message: String\r\n}\r\n\r\nextend type Query {\r\n  """\r\n  Dummy query for highlighting test\r\n  """\r\n  dummy(\r\n    int: Int = 123\r\n    float: Float = 123.456\r\n    str: String = "Hello World!"\r\n    boolDefaultTrue: Boolean = true\r\n    boolDefaultFalse: Boolean = false\r\n    id: ID\r\n    search: SearchInput = null\r\n  ): Boolean\r\n}\r\n\r\nschema {\r\n  query: Query\r\n  mutation: Mutation\r\n  subscription: Subscription\r\n}\r\n\r\n# GraphQL Query Language\r\n\r\nquery dummyQuery($int: Int) {\r\n  dummy(int: $int)\r\n}\r\n\r\nmutation favoriteEpisode($episode: Episode) {\r\n  favorite(episode: $episode)\r\n}\r\n'}}]);
//# sourceMappingURL=3926.js.map