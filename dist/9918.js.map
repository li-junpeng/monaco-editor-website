{"version":3,"file":"9918.js","mappings":"8IAAA,kxB","sources":["file:///C:\\0-E\\Code Store\\monaco-editor\\website\\src\\website\\data\\home-samples\\sample.julia.txt"],"sourcesContent":["export default \"# good style\\r\\nfunction fixedpointmap(f; iv, tolerance=1E-7, maxiter=1000)\\r\\n    # setup the algorithm\\r\\n    x_old = iv\\r\\n    normdiff = Inf\\r\\n    iter = 1\\r\\n    while normdiff > tolerance && iter <= maxiter\\r\\n        x_new = f(x_old) # use the passed in map\\r\\n        normdiff = norm(x_new - x_old)\\r\\n        x_old = x_new\\r\\n        iter = iter + 1\\r\\n    end\\r\\n    return (value = x_old, normdiff=normdiff, iter=iter) # A named tuple\\r\\nend\\r\\n\\r\\n# define a map and parameters\\r\\np = 1.0\\r\\nβ = 0.9\\r\\nf(v) = p + β * v # note that p and β are used in the function!\\r\\n\\r\\nsol = fixedpointmap(f, iv=0.8, tolerance=1.0E-8) # don't need to pass\\r\\nprintln(\\\"Fixed point = $(sol.value), and |f(x) - x| = $(sol.normdiff) in $(sol.iter)\\\"*\\r\\n        \\\" iterations\\\")\\r\\n\";"],"names":[],"sourceRoot":""}